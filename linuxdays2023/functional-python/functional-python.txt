        Funkcionální programování v Pythonu
══════════════════════════════════════════════════
■ Autor    Pavel Tišnovský
■ Email    <tisnik 0x40 centrum 0x2e cz>
■ Datum    2023-10-07

Obsah přednášky (1)
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Programovací jazyk Python
▶ Funkcionální programování

Programovací jazyk Python
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Typické použití Pythonu
    ◆ Nástroje a utility ovládané z příkazového řádku
    ◆ Aplikace s grafickým uživatelským rozhraním
    ◆ Client-server
        - serverová část (Flask, Django, CherryPy, ...)
        - klient (Brython, spíše technologické demo)
    ◆ Numerické výpočty, symbolické výpočty
        - NumPy
        - SciPy
        - Matplotlib
    ◆ Moderní způsoby využití Pythonu
        - AI
        - Machine Learning (Deep Learning)
          PyTorch
        - Big data
    ◆ Tzv. „glue“ jazyk
    ◆ Vestavitelný interpret Pythonu

Funkcionální programování
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Funkce jsou plnohodnotnými typy
▶ Čisté funkce (bez vedlejších efektů)
    ◆ referenční průhlednost (transparency)
    ◆ volání funkce s danými parametry lze nahradit za výsledek
▶ Preferuje se použití neměnitelných hodnot
    ◆ immutable values/variables
    ◆ čistě funkcionální datové struktury

Proč funkcionální programování?
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Funkce bez vedlejších efektů se snadno testují
▶ Funkce bez vedlejších efektů se snadno ladí
▶ Stav aplikace je izolován
▶ Zajištěn souběh či paralelní běh částí programu
▶ Neměnné hodnoty: méně možností vytvořit vedlejší efekt

Funkce jsou plnohodnotnými typy
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ "Functions are first-class citizens"
    ◆ v mnoha materiálech se toto tvrzení rychle přejde
    ◆ ovšem má mnoho důsledků zasahujících do sémantiky
▶ Některé zásadní důsledky pro programovací jazyk
    ◆ musí být podporovány funkce vyššího řádu
    ◆ musí být podporovány uzávěry (pokud se nemění sémantika viditelnosti)
    ◆ typicky se vyžadují nelokální změny stavu aplikace

Funkce jsou plnohodnotnými typy
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Další vlastnosti jazyka vyplývající z tohoto tvrzení
    ◆ může být možné skládat funkce (compose)
    ◆ může být možné transformovat funkce
        - někdy i curryfikace jako forma transformace
    ◆ je možné si zapamatovat výsledky funkcí
        - čisté funkce lze chápat jako mapy/slovníky na steroidech

Python jako funkcionální jazyk?
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ V Pythonu jsou funkce plnohodnotnými datovými typy
    ◆ se všemi z toho plynoucími důsledky
    ◆ "funkční" literál poněkud matoucí
▶ Neměnitelné datové typy?
    ◆ standardní jen částečně (řetězce, n-tice)
    ◆ existují rozšiřující knihovny
    
Funkcionální koncepty v Pythonu
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Funkce vyššího řádu
▶ Anonymní funkce (lambdy)
    ◆ jen omezeně
▶ Uzávěry (closures)
▶ Generátorové notace
    ◆ pro seznamy, množiny, slovníky i n-tice
▶ Parciální funkce
    ◆ transformace
▶ Caching výsledků funkcí

Praktická část
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Lambda výrazy
▶ Funkce vyššího řádu
▶ Uzávěry
▶ Generátorové notace
▶ Parciální funkce
▶ Caching výsledků funkcí

Lambda výrazy
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Funkce vyššího řádu
Uzávěry
Generátorové notace
Parciální funkce
Caching výsledků funkcí
