
intrinsic_avx_3.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
#include <stdio.h>
#include <immintrin.h>

int main(void)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	4c 8d 54 24 08       	lea    r10,[rsp+0x8]
   9:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
   d:	41 ff 72 f8          	push   QWORD PTR [r10-0x8]
  11:	55                   	push   rbp
  12:	48 89 e5             	mov    rbp,rsp
  15:	41 52                	push   r10
  17:	48 81 ec a8 00 00 00 	sub    rsp,0xa8
  1e:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  25:	00 00 
  27:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  2b:	31 c0                	xor    eax,eax
    __v8sf x = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 };
  2d:	c5 fc 28 05 00 00 00 	vmovaps ymm0,YMMWORD PTR [rip+0x0]        # 35 <main+0x35>
  34:	00 
  35:	c5 fc 29 85 70 ff ff 	vmovaps YMMWORD PTR [rbp-0x90],ymm0
  3c:	ff 
    __v8sf y = { 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8 };
  3d:	c5 fc 28 05 00 00 00 	vmovaps ymm0,YMMWORD PTR [rip+0x0]        # 45 <main+0x45>
  44:	00 
  45:	c5 fc 29 45 90       	vmovaps YMMWORD PTR [rbp-0x70],ymm0
    __v8sf z;
    int i;

    z = __builtin_ia32_blendps256(x, y, 0x55);
  4a:	c5 fc 28 4d 90       	vmovaps ymm1,YMMWORD PTR [rbp-0x70]
  4f:	c5 fc 28 85 70 ff ff 	vmovaps ymm0,YMMWORD PTR [rbp-0x90]
  56:	ff 
  57:	c4 e3 7d 0c c1 55    	vblendps ymm0,ymm0,ymm1,0x55
  5d:	c5 fc 29 45 b0       	vmovaps YMMWORD PTR [rbp-0x50],ymm0

    for (i = 0; i < sizeof(x) / sizeof(float); i++) {
  62:	c7 85 6c ff ff ff 00 	mov    DWORD PTR [rbp-0x94],0x0
  69:	00 00 00 
  6c:	eb 59                	jmp    c7 <main+0xc7>
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
  6e:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  74:	48 98                	cdqe   
  76:	c5 fa 10 44 85 b0    	vmovss xmm0,DWORD PTR [rbp+rax*4-0x50]
  7c:	c5 fa 5a d0          	vcvtss2sd xmm2,xmm0,xmm0
  80:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  86:	48 98                	cdqe   
  88:	c5 fa 10 44 85 90    	vmovss xmm0,DWORD PTR [rbp+rax*4-0x70]
  8e:	c5 fa 5a c8          	vcvtss2sd xmm1,xmm0,xmm0
  92:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  98:	48 98                	cdqe   
  9a:	c5 fa 10 84 85 70 ff 	vmovss xmm0,DWORD PTR [rbp+rax*4-0x90]
  a1:	ff ff 
  a3:	c5 fa 5a c0          	vcvtss2sd xmm0,xmm0,xmm0
  a7:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  ad:	89 c6                	mov    esi,eax
  af:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # b6 <main+0xb6>
  b6:	b8 03 00 00 00       	mov    eax,0x3
  bb:	e8 00 00 00 00       	call   c0 <main+0xc0>
    for (i = 0; i < sizeof(x) / sizeof(float); i++) {
  c0:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
  c7:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  cd:	83 f8 07             	cmp    eax,0x7
  d0:	76 9c                	jbe    6e <main+0x6e>
    }

    putchar('\n');
  d2:	bf 0a 00 00 00       	mov    edi,0xa
  d7:	e8 00 00 00 00       	call   dc <main+0xdc>

    z = __builtin_ia32_blendps256(x, y, 0xf0);
  dc:	c5 fc 28 4d 90       	vmovaps ymm1,YMMWORD PTR [rbp-0x70]
  e1:	c5 fc 28 85 70 ff ff 	vmovaps ymm0,YMMWORD PTR [rbp-0x90]
  e8:	ff 
  e9:	c4 e3 7d 0c c1 f0    	vblendps ymm0,ymm0,ymm1,0xf0
  ef:	c5 fc 29 45 b0       	vmovaps YMMWORD PTR [rbp-0x50],ymm0

    for (i = 0; i < sizeof(x) / sizeof(float); i++) {
  f4:	c7 85 6c ff ff ff 00 	mov    DWORD PTR [rbp-0x94],0x0
  fb:	00 00 00 
  fe:	eb 59                	jmp    159 <main+0x159>
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
 100:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
 106:	48 98                	cdqe   
 108:	c5 fa 10 44 85 b0    	vmovss xmm0,DWORD PTR [rbp+rax*4-0x50]
 10e:	c5 fa 5a d0          	vcvtss2sd xmm2,xmm0,xmm0
 112:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
 118:	48 98                	cdqe   
 11a:	c5 fa 10 44 85 90    	vmovss xmm0,DWORD PTR [rbp+rax*4-0x70]
 120:	c5 fa 5a c8          	vcvtss2sd xmm1,xmm0,xmm0
 124:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
 12a:	48 98                	cdqe   
 12c:	c5 fa 10 84 85 70 ff 	vmovss xmm0,DWORD PTR [rbp+rax*4-0x90]
 133:	ff ff 
 135:	c5 fa 5a c0          	vcvtss2sd xmm0,xmm0,xmm0
 139:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
 13f:	89 c6                	mov    esi,eax
 141:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 148 <main+0x148>
 148:	b8 03 00 00 00       	mov    eax,0x3
 14d:	e8 00 00 00 00       	call   152 <main+0x152>
    for (i = 0; i < sizeof(x) / sizeof(float); i++) {
 152:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
 159:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
 15f:	83 f8 07             	cmp    eax,0x7
 162:	76 9c                	jbe    100 <main+0x100>
    }

    putchar('\n');
 164:	bf 0a 00 00 00       	mov    edi,0xa
 169:	e8 00 00 00 00       	call   16e <main+0x16e>

    z = __builtin_ia32_blendps256(x, y, 0x0f);
 16e:	c5 fc 28 4d 90       	vmovaps ymm1,YMMWORD PTR [rbp-0x70]
 173:	c5 fc 28 85 70 ff ff 	vmovaps ymm0,YMMWORD PTR [rbp-0x90]
 17a:	ff 
 17b:	c4 e3 7d 0c c1 0f    	vblendps ymm0,ymm0,ymm1,0xf
 181:	c5 fc 29 45 b0       	vmovaps YMMWORD PTR [rbp-0x50],ymm0

    for (i = 0; i < sizeof(x) / sizeof(float); i++) {
 186:	c7 85 6c ff ff ff 00 	mov    DWORD PTR [rbp-0x94],0x0
 18d:	00 00 00 
 190:	eb 59                	jmp    1eb <main+0x1eb>
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
 192:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
 198:	48 98                	cdqe   
 19a:	c5 fa 10 44 85 b0    	vmovss xmm0,DWORD PTR [rbp+rax*4-0x50]
 1a0:	c5 fa 5a d0          	vcvtss2sd xmm2,xmm0,xmm0
 1a4:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
 1aa:	48 98                	cdqe   
 1ac:	c5 fa 10 44 85 90    	vmovss xmm0,DWORD PTR [rbp+rax*4-0x70]
 1b2:	c5 fa 5a c8          	vcvtss2sd xmm1,xmm0,xmm0
 1b6:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
 1bc:	48 98                	cdqe   
 1be:	c5 fa 10 84 85 70 ff 	vmovss xmm0,DWORD PTR [rbp+rax*4-0x90]
 1c5:	ff ff 
 1c7:	c5 fa 5a c0          	vcvtss2sd xmm0,xmm0,xmm0
 1cb:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
 1d1:	89 c6                	mov    esi,eax
 1d3:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1da <main+0x1da>
 1da:	b8 03 00 00 00       	mov    eax,0x3
 1df:	e8 00 00 00 00       	call   1e4 <main+0x1e4>
    for (i = 0; i < sizeof(x) / sizeof(float); i++) {
 1e4:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
 1eb:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
 1f1:	83 f8 07             	cmp    eax,0x7
 1f4:	76 9c                	jbe    192 <main+0x192>
 1f6:	b8 00 00 00 00       	mov    eax,0x0
    }
}
 1fb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
 1ff:	64 48 33 14 25 28 00 	xor    rdx,QWORD PTR fs:0x28
 206:	00 00 
 208:	74 05                	je     20f <main+0x20f>
 20a:	e8 00 00 00 00       	call   20f <main+0x20f>
 20f:	48 81 c4 a8 00 00 00 	add    rsp,0xa8
 216:	41 5a                	pop    r10
 218:	5d                   	pop    rbp
 219:	49 8d 62 f8          	lea    rsp,[r10-0x8]
 21d:	c3                   	ret    
