
simd21_sse.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <add32float>:
#include <stdio.h>

typedef float v32float __attribute__((vector_size(32)));

void add32float(v32float x, v32float y, v32float * z)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
   5:	48 89 e5             	mov    rbp,rsp
   8:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    *z = x + y;
   c:	0f 28 4d 10          	movaps xmm1,XMMWORD PTR [rbp+0x10]
  10:	0f 28 45 30          	movaps xmm0,XMMWORD PTR [rbp+0x30]
  14:	0f 58 c8             	addps  xmm1,xmm0
  17:	0f 28 55 20          	movaps xmm2,XMMWORD PTR [rbp+0x20]
  1b:	0f 28 45 40          	movaps xmm0,XMMWORD PTR [rbp+0x40]
  1f:	0f 58 c2             	addps  xmm0,xmm2
  22:	0f 29 4d a0          	movaps XMMWORD PTR [rbp-0x60],xmm1
  26:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
  2a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  2e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  32:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  36:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  3a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  3e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  42:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  46:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  4a:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  4e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  52:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  56:	48 89 01             	mov    QWORD PTR [rcx],rax
  59:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
  5d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  61:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  65:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  69:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
}
  6d:	90                   	nop
  6e:	5d                   	pop    rbp
  6f:	c3                   	ret    

0000000000000070 <add32double>:

typedef double v32double __attribute__((vector_size(32)));

void add32double(v32double x, v32double y, v32double * z)
{
  70:	f3 0f 1e fa          	endbr64 
  74:	55                   	push   rbp
  75:	48 89 e5             	mov    rbp,rsp
  78:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    *z = x + y;
  7c:	66 0f 28 4d 10       	movapd xmm1,XMMWORD PTR [rbp+0x10]
  81:	66 0f 28 45 30       	movapd xmm0,XMMWORD PTR [rbp+0x30]
  86:	66 0f 58 c8          	addpd  xmm1,xmm0
  8a:	66 0f 28 55 20       	movapd xmm2,XMMWORD PTR [rbp+0x20]
  8f:	66 0f 28 45 40       	movapd xmm0,XMMWORD PTR [rbp+0x40]
  94:	66 0f 58 c2          	addpd  xmm0,xmm2
  98:	0f 29 4d a0          	movaps XMMWORD PTR [rbp-0x60],xmm1
  9c:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
  a0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  a4:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  a8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  ac:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  b0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  b4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  b8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  bc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  c0:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  c4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  c8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  cc:	48 89 01             	mov    QWORD PTR [rcx],rax
  cf:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
  d3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  d7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  db:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  df:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
}
  e3:	90                   	nop
  e4:	5d                   	pop    rbp
  e5:	c3                   	ret    

00000000000000e6 <main>:

int main(void)
{
  e6:	f3 0f 1e fa          	endbr64 
  ea:	4c 8d 54 24 08       	lea    r10,[rsp+0x8]
  ef:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
  f3:	41 ff 72 f8          	push   QWORD PTR [r10-0x8]
  f7:	55                   	push   rbp
  f8:	48 89 e5             	mov    rbp,rsp
  fb:	41 52                	push   r10
  fd:	48 81 ec 28 01 00 00 	sub    rsp,0x128
 104:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 10b:	00 00 
 10d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
 111:	31 c0                	xor    eax,eax
    {
        v32float x = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};
 113:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 11b <main+0x35>
 11a:	00 
 11b:	f3 0f 11 85 f0 fe ff 	movss  DWORD PTR [rbp-0x110],xmm0
 122:	ff 
 123:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 12b <main+0x45>
 12a:	00 
 12b:	f3 0f 11 85 f4 fe ff 	movss  DWORD PTR [rbp-0x10c],xmm0
 132:	ff 
 133:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 13b <main+0x55>
 13a:	00 
 13b:	f3 0f 11 85 f8 fe ff 	movss  DWORD PTR [rbp-0x108],xmm0
 142:	ff 
 143:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 14b <main+0x65>
 14a:	00 
 14b:	f3 0f 11 85 fc fe ff 	movss  DWORD PTR [rbp-0x104],xmm0
 152:	ff 
 153:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 15b <main+0x75>
 15a:	00 
 15b:	f3 0f 11 85 00 ff ff 	movss  DWORD PTR [rbp-0x100],xmm0
 162:	ff 
 163:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 16b <main+0x85>
 16a:	00 
 16b:	f3 0f 11 85 04 ff ff 	movss  DWORD PTR [rbp-0xfc],xmm0
 172:	ff 
 173:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 17b <main+0x95>
 17a:	00 
 17b:	f3 0f 11 85 08 ff ff 	movss  DWORD PTR [rbp-0xf8],xmm0
 182:	ff 
 183:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 18b <main+0xa5>
 18a:	00 
 18b:	f3 0f 11 85 0c ff ff 	movss  DWORD PTR [rbp-0xf4],xmm0
 192:	ff 
        v32float y = {0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5};
 193:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 19b <main+0xb5>
 19a:	00 
 19b:	f3 0f 11 85 10 ff ff 	movss  DWORD PTR [rbp-0xf0],xmm0
 1a2:	ff 
 1a3:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 1ab <main+0xc5>
 1aa:	00 
 1ab:	f3 0f 11 85 14 ff ff 	movss  DWORD PTR [rbp-0xec],xmm0
 1b2:	ff 
 1b3:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 1bb <main+0xd5>
 1ba:	00 
 1bb:	f3 0f 11 85 18 ff ff 	movss  DWORD PTR [rbp-0xe8],xmm0
 1c2:	ff 
 1c3:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 1cb <main+0xe5>
 1ca:	00 
 1cb:	f3 0f 11 85 1c ff ff 	movss  DWORD PTR [rbp-0xe4],xmm0
 1d2:	ff 
 1d3:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 1db <main+0xf5>
 1da:	00 
 1db:	f3 0f 11 85 20 ff ff 	movss  DWORD PTR [rbp-0xe0],xmm0
 1e2:	ff 
 1e3:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 1eb <main+0x105>
 1ea:	00 
 1eb:	f3 0f 11 85 24 ff ff 	movss  DWORD PTR [rbp-0xdc],xmm0
 1f2:	ff 
 1f3:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 1fb <main+0x115>
 1fa:	00 
 1fb:	f3 0f 11 85 28 ff ff 	movss  DWORD PTR [rbp-0xd8],xmm0
 202:	ff 
 203:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 20b <main+0x125>
 20a:	00 
 20b:	f3 0f 11 85 2c ff ff 	movss  DWORD PTR [rbp-0xd4],xmm0
 212:	ff 
        v32float z;
        int i;

        add32float(x, y, &z);
 213:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
 21a:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
 221:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
 228:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
 22f:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
 236:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
 23d:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
 244:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
 24b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
 252:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
 259:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
 260:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
 267:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
 26e:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
 275:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
 279:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
 27d:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
 284:	ff b5 68 ff ff ff    	push   QWORD PTR [rbp-0x98]
 28a:	ff b5 60 ff ff ff    	push   QWORD PTR [rbp-0xa0]
 290:	ff b5 58 ff ff ff    	push   QWORD PTR [rbp-0xa8]
 296:	ff b5 50 ff ff ff    	push   QWORD PTR [rbp-0xb0]
 29c:	ff 75 88             	push   QWORD PTR [rbp-0x78]
 29f:	ff 75 80             	push   QWORD PTR [rbp-0x80]
 2a2:	ff b5 78 ff ff ff    	push   QWORD PTR [rbp-0x88]
 2a8:	ff b5 70 ff ff ff    	push   QWORD PTR [rbp-0x90]
 2ae:	48 89 c7             	mov    rdi,rax
 2b1:	e8 00 00 00 00       	call   2b6 <main+0x1d0>
 2b6:	48 83 c4 40          	add    rsp,0x40

        puts("vector of floats");
 2ba:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2c1 <main+0x1db>
 2c1:	e8 00 00 00 00       	call   2c6 <main+0x1e0>

        for (i = 0; i < sizeof(v32float) / sizeof(float); i++) {
 2c6:	c7 85 e8 fe ff ff 00 	mov    DWORD PTR [rbp-0x118],0x0
 2cd:	00 00 00 
 2d0:	eb 5f                	jmp    331 <main+0x24b>
            printf("%d     %f + %f = %f\n", i, x[i], y[i], z[i]);
 2d2:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
 2d8:	48 98                	cdqe   
 2da:	f3 0f 10 84 85 30 ff 	movss  xmm0,DWORD PTR [rbp+rax*4-0xd0]
 2e1:	ff ff 
 2e3:	f3 0f 5a d0          	cvtss2sd xmm2,xmm0
 2e7:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
 2ed:	48 98                	cdqe   
 2ef:	f3 0f 10 84 85 10 ff 	movss  xmm0,DWORD PTR [rbp+rax*4-0xf0]
 2f6:	ff ff 
 2f8:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
 2fc:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
 302:	48 98                	cdqe   
 304:	f3 0f 10 84 85 f0 fe 	movss  xmm0,DWORD PTR [rbp+rax*4-0x110]
 30b:	ff ff 
 30d:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
 311:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
 317:	89 c6                	mov    esi,eax
 319:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 320 <main+0x23a>
 320:	b8 03 00 00 00       	mov    eax,0x3
 325:	e8 00 00 00 00       	call   32a <main+0x244>
        for (i = 0; i < sizeof(v32float) / sizeof(float); i++) {
 32a:	83 85 e8 fe ff ff 01 	add    DWORD PTR [rbp-0x118],0x1
 331:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
 337:	83 f8 07             	cmp    eax,0x7
 33a:	76 96                	jbe    2d2 <main+0x1ec>
        }
    }

    putchar('\n');
 33c:	bf 0a 00 00 00       	mov    edi,0xa
 341:	e8 00 00 00 00       	call   346 <main+0x260>

    {
        v32double x = {1.0, 2.0, 3.0, 4.0};
 346:	f2 0f 10 05 00 00 00 	movsd  xmm0,QWORD PTR [rip+0x0]        # 34e <main+0x268>
 34d:	00 
 34e:	f2 0f 11 85 f0 fe ff 	movsd  QWORD PTR [rbp-0x110],xmm0
 355:	ff 
 356:	f2 0f 10 05 00 00 00 	movsd  xmm0,QWORD PTR [rip+0x0]        # 35e <main+0x278>
 35d:	00 
 35e:	f2 0f 11 85 f8 fe ff 	movsd  QWORD PTR [rbp-0x108],xmm0
 365:	ff 
 366:	f2 0f 10 05 00 00 00 	movsd  xmm0,QWORD PTR [rip+0x0]        # 36e <main+0x288>
 36d:	00 
 36e:	f2 0f 11 85 00 ff ff 	movsd  QWORD PTR [rbp-0x100],xmm0
 375:	ff 
 376:	f2 0f 10 05 00 00 00 	movsd  xmm0,QWORD PTR [rip+0x0]        # 37e <main+0x298>
 37d:	00 
 37e:	f2 0f 11 85 08 ff ff 	movsd  QWORD PTR [rbp-0xf8],xmm0
 385:	ff 
        v32double y = {0.5, 0.5, 0.5, 0.5};
 386:	f2 0f 10 05 00 00 00 	movsd  xmm0,QWORD PTR [rip+0x0]        # 38e <main+0x2a8>
 38d:	00 
 38e:	f2 0f 11 85 10 ff ff 	movsd  QWORD PTR [rbp-0xf0],xmm0
 395:	ff 
 396:	f2 0f 10 05 00 00 00 	movsd  xmm0,QWORD PTR [rip+0x0]        # 39e <main+0x2b8>
 39d:	00 
 39e:	f2 0f 11 85 18 ff ff 	movsd  QWORD PTR [rbp-0xe8],xmm0
 3a5:	ff 
 3a6:	f2 0f 10 05 00 00 00 	movsd  xmm0,QWORD PTR [rip+0x0]        # 3ae <main+0x2c8>
 3ad:	00 
 3ae:	f2 0f 11 85 20 ff ff 	movsd  QWORD PTR [rbp-0xe0],xmm0
 3b5:	ff 
 3b6:	f2 0f 10 05 00 00 00 	movsd  xmm0,QWORD PTR [rip+0x0]        # 3be <main+0x2d8>
 3bd:	00 
 3be:	f2 0f 11 85 28 ff ff 	movsd  QWORD PTR [rbp-0xd8],xmm0
 3c5:	ff 
        v32double z;
        int i;

        add32double(x, y, &z);
 3c6:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
 3cd:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
 3d4:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
 3d8:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
 3dc:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
 3e3:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
 3ea:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
 3ee:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
 3f2:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
 3f9:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
 400:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
 404:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
 408:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
 40f:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
 416:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
 41a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
 41e:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
 425:	ff 75 a8             	push   QWORD PTR [rbp-0x58]
 428:	ff 75 a0             	push   QWORD PTR [rbp-0x60]
 42b:	ff 75 98             	push   QWORD PTR [rbp-0x68]
 42e:	ff 75 90             	push   QWORD PTR [rbp-0x70]
 431:	ff 75 c8             	push   QWORD PTR [rbp-0x38]
 434:	ff 75 c0             	push   QWORD PTR [rbp-0x40]
 437:	ff 75 b8             	push   QWORD PTR [rbp-0x48]
 43a:	ff 75 b0             	push   QWORD PTR [rbp-0x50]
 43d:	48 89 c7             	mov    rdi,rax
 440:	e8 00 00 00 00       	call   445 <main+0x35f>
 445:	48 83 c4 40          	add    rsp,0x40

        puts("vector of doubles");
 449:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 450 <main+0x36a>
 450:	e8 00 00 00 00       	call   455 <main+0x36f>

        for (i = 0; i < sizeof(v32double) / sizeof(double); i++) {
 455:	c7 85 ec fe ff ff 00 	mov    DWORD PTR [rbp-0x114],0x0
 45c:	00 00 00 
 45f:	eb 5f                	jmp    4c0 <main+0x3da>
            printf("%d     %f + %f = %f\n", i, x[i], y[i], z[i]);
 461:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
 467:	48 98                	cdqe   
 469:	f2 0f 10 8c c5 30 ff 	movsd  xmm1,QWORD PTR [rbp+rax*8-0xd0]
 470:	ff ff 
 472:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
 478:	48 98                	cdqe   
 47a:	f2 0f 10 84 c5 10 ff 	movsd  xmm0,QWORD PTR [rbp+rax*8-0xf0]
 481:	ff ff 
 483:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
 489:	48 98                	cdqe   
 48b:	48 8b 94 c5 f0 fe ff 	mov    rdx,QWORD PTR [rbp+rax*8-0x110]
 492:	ff 
 493:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
 499:	66 0f 28 d1          	movapd xmm2,xmm1
 49d:	66 0f 28 c8          	movapd xmm1,xmm0
 4a1:	66 48 0f 6e c2       	movq   xmm0,rdx
 4a6:	89 c6                	mov    esi,eax
 4a8:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 4af <main+0x3c9>
 4af:	b8 03 00 00 00       	mov    eax,0x3
 4b4:	e8 00 00 00 00       	call   4b9 <main+0x3d3>
        for (i = 0; i < sizeof(v32double) / sizeof(double); i++) {
 4b9:	83 85 ec fe ff ff 01 	add    DWORD PTR [rbp-0x114],0x1
 4c0:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
 4c6:	83 f8 03             	cmp    eax,0x3
 4c9:	76 96                	jbe    461 <main+0x37b>
        }
    }


    return 0;
 4cb:	b8 00 00 00 00       	mov    eax,0x0
}
 4d0:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
 4d4:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
 4db:	00 00 
 4dd:	74 05                	je     4e4 <main+0x3fe>
 4df:	e8 00 00 00 00       	call   4e4 <main+0x3fe>
 4e4:	4c 8b 55 f8          	mov    r10,QWORD PTR [rbp-0x8]
 4e8:	c9                   	leave  
 4e9:	49 8d 62 f8          	lea    rsp,[r10-0x8]
 4ed:	c3                   	ret    
