
simd19_avx.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <add32ub>:
#include <stdio.h>

typedef unsigned char v32ub __attribute__((vector_size(32)));

void add32ub(v32ub x, v32ub y, v32ub * z)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
   5:	48 89 e5             	mov    rbp,rsp
   8:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
   c:	c5 fd 7f 44 24 e0    	vmovdqa YMMWORD PTR [rsp-0x20],ymm0
  12:	c5 fd 7f 4c 24 c0    	vmovdqa YMMWORD PTR [rsp-0x40],ymm1
  18:	48 89 7c 24 b8       	mov    QWORD PTR [rsp-0x48],rdi
    *z = x + y;
  1d:	c5 f9 6f 4c 24 e0    	vmovdqa xmm1,XMMWORD PTR [rsp-0x20]
  23:	c5 f9 6f 44 24 c0    	vmovdqa xmm0,XMMWORD PTR [rsp-0x40]
  29:	c5 f1 fc c0          	vpaddb xmm0,xmm1,xmm0
  2d:	c5 f9 6f 54 24 f0    	vmovdqa xmm2,XMMWORD PTR [rsp-0x10]
  33:	c5 f9 6f 4c 24 d0    	vmovdqa xmm1,XMMWORD PTR [rsp-0x30]
  39:	c5 e9 fc c9          	vpaddb xmm1,xmm2,xmm1
  3d:	c4 e3 7d 18 c1 01    	vinsertf128 ymm0,ymm0,xmm1,0x1
  43:	48 8b 44 24 b8       	mov    rax,QWORD PTR [rsp-0x48]
  48:	c5 fd 7f 00          	vmovdqa YMMWORD PTR [rax],ymm0
}
  4c:	90                   	nop
  4d:	c9                   	leave  
  4e:	c3                   	ret    

000000000000004f <add32us>:

typedef unsigned short v32us __attribute__((vector_size(32)));

void add32us(v32us x, v32us y, v32us * z)
{
  4f:	f3 0f 1e fa          	endbr64 
  53:	55                   	push   rbp
  54:	48 89 e5             	mov    rbp,rsp
  57:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
  5b:	c5 fd 7f 44 24 e0    	vmovdqa YMMWORD PTR [rsp-0x20],ymm0
  61:	c5 fd 7f 4c 24 c0    	vmovdqa YMMWORD PTR [rsp-0x40],ymm1
  67:	48 89 7c 24 b8       	mov    QWORD PTR [rsp-0x48],rdi
    *z = x + y;
  6c:	c5 f9 6f 4c 24 e0    	vmovdqa xmm1,XMMWORD PTR [rsp-0x20]
  72:	c5 f9 6f 44 24 c0    	vmovdqa xmm0,XMMWORD PTR [rsp-0x40]
  78:	c5 f1 fd c0          	vpaddw xmm0,xmm1,xmm0
  7c:	c5 f9 6f 54 24 f0    	vmovdqa xmm2,XMMWORD PTR [rsp-0x10]
  82:	c5 f9 6f 4c 24 d0    	vmovdqa xmm1,XMMWORD PTR [rsp-0x30]
  88:	c5 e9 fd c9          	vpaddw xmm1,xmm2,xmm1
  8c:	c4 e3 7d 18 c1 01    	vinsertf128 ymm0,ymm0,xmm1,0x1
  92:	48 8b 44 24 b8       	mov    rax,QWORD PTR [rsp-0x48]
  97:	c5 fd 7f 00          	vmovdqa YMMWORD PTR [rax],ymm0
}
  9b:	90                   	nop
  9c:	c9                   	leave  
  9d:	c3                   	ret    

000000000000009e <add32ui>:

typedef unsigned int v32ui __attribute__((vector_size(32)));

void add32ui(v32ui x, v32ui y, v32ui * z)
{
  9e:	f3 0f 1e fa          	endbr64 
  a2:	55                   	push   rbp
  a3:	48 89 e5             	mov    rbp,rsp
  a6:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
  aa:	c5 fd 7f 44 24 e0    	vmovdqa YMMWORD PTR [rsp-0x20],ymm0
  b0:	c5 fd 7f 4c 24 c0    	vmovdqa YMMWORD PTR [rsp-0x40],ymm1
  b6:	48 89 7c 24 b8       	mov    QWORD PTR [rsp-0x48],rdi
    *z = x + y;
  bb:	c5 f9 6f 4c 24 e0    	vmovdqa xmm1,XMMWORD PTR [rsp-0x20]
  c1:	c5 f9 6f 44 24 c0    	vmovdqa xmm0,XMMWORD PTR [rsp-0x40]
  c7:	c5 f1 fe c0          	vpaddd xmm0,xmm1,xmm0
  cb:	c5 f9 6f 54 24 f0    	vmovdqa xmm2,XMMWORD PTR [rsp-0x10]
  d1:	c5 f9 6f 4c 24 d0    	vmovdqa xmm1,XMMWORD PTR [rsp-0x30]
  d7:	c5 e9 fe c9          	vpaddd xmm1,xmm2,xmm1
  db:	c4 e3 7d 18 c1 01    	vinsertf128 ymm0,ymm0,xmm1,0x1
  e1:	48 8b 44 24 b8       	mov    rax,QWORD PTR [rsp-0x48]
  e6:	c5 fd 7f 00          	vmovdqa YMMWORD PTR [rax],ymm0
}
  ea:	90                   	nop
  eb:	c9                   	leave  
  ec:	c3                   	ret    

00000000000000ed <add32ul>:

typedef unsigned long int v32ul __attribute__((vector_size(32)));

void add32ul(v32ul x, v32ul y, v32ul * z)
{
  ed:	f3 0f 1e fa          	endbr64 
  f1:	55                   	push   rbp
  f2:	48 89 e5             	mov    rbp,rsp
  f5:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
  f9:	c5 fd 7f 44 24 e0    	vmovdqa YMMWORD PTR [rsp-0x20],ymm0
  ff:	c5 fd 7f 4c 24 c0    	vmovdqa YMMWORD PTR [rsp-0x40],ymm1
 105:	48 89 7c 24 b8       	mov    QWORD PTR [rsp-0x48],rdi
    *z = x + y;
 10a:	c5 f9 6f 4c 24 e0    	vmovdqa xmm1,XMMWORD PTR [rsp-0x20]
 110:	c5 f9 6f 44 24 c0    	vmovdqa xmm0,XMMWORD PTR [rsp-0x40]
 116:	c5 f1 d4 c0          	vpaddq xmm0,xmm1,xmm0
 11a:	c5 f9 6f 54 24 f0    	vmovdqa xmm2,XMMWORD PTR [rsp-0x10]
 120:	c5 f9 6f 4c 24 d0    	vmovdqa xmm1,XMMWORD PTR [rsp-0x30]
 126:	c5 e9 d4 c9          	vpaddq xmm1,xmm2,xmm1
 12a:	c4 e3 7d 18 c1 01    	vinsertf128 ymm0,ymm0,xmm1,0x1
 130:	48 8b 44 24 b8       	mov    rax,QWORD PTR [rsp-0x48]
 135:	c5 fd 7f 00          	vmovdqa YMMWORD PTR [rax],ymm0
}
 139:	90                   	nop
 13a:	c9                   	leave  
 13b:	c3                   	ret    

000000000000013c <main>:

int main(void)
{
 13c:	f3 0f 1e fa          	endbr64 
 140:	4c 8d 54 24 08       	lea    r10,[rsp+0x8]
 145:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
 149:	41 ff 72 f8          	push   QWORD PTR [r10-0x8]
 14d:	55                   	push   rbp
 14e:	48 89 e5             	mov    rbp,rsp
 151:	41 52                	push   r10
 153:	48 81 ec 68 01 00 00 	sub    rsp,0x168
 15a:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 161:	00 00 
 163:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
 167:	31 c0                	xor    eax,eax
    {
        v32ub x =
 169:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 171 <main+0x35>
 170:	00 
 171:	c5 fd 7f 85 d0 fe ff 	vmovdqa YMMWORD PTR [rbp-0x130],ymm0
 178:	ff 
            { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
          18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
        v32ub y =
 179:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 181 <main+0x45>
 180:	00 
 181:	c5 fd 7f 85 f0 fe ff 	vmovdqa YMMWORD PTR [rbp-0x110],ymm0
 188:	ff 
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};
        v32ub z;

        add32ub(x, y, &z);
 189:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 190:	c5 fd 6f 8d f0 fe ff 	vmovdqa ymm1,YMMWORD PTR [rbp-0x110]
 197:	ff 
 198:	c5 fd 6f 85 d0 fe ff 	vmovdqa ymm0,YMMWORD PTR [rbp-0x130]
 19f:	ff 
 1a0:	48 89 c7             	mov    rdi,rax
 1a3:	e8 00 00 00 00       	call   1a8 <main+0x6c>

        int i;

        puts("vector of unsigned chars");
 1a8:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1af <main+0x73>
 1af:	e8 00 00 00 00       	call   1b4 <main+0x78>

        for (i = 0; i < sizeof(v32ub) / sizeof(unsigned char); i++) {
 1b4:	c7 85 a0 fe ff ff 00 	mov    DWORD PTR [rbp-0x160],0x0
 1bb:	00 00 00 
 1be:	eb 33                	jmp    1f3 <main+0xb7>
            printf("%d %u\n", i, z[i]);
 1c0:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
 1c6:	48 98                	cdqe   
 1c8:	0f b6 84 05 b0 fe ff 	movzx  eax,BYTE PTR [rbp+rax*1-0x150]
 1cf:	ff 
 1d0:	0f b6 d0             	movzx  edx,al
 1d3:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
 1d9:	89 c6                	mov    esi,eax
 1db:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1e2 <main+0xa6>
 1e2:	b8 00 00 00 00       	mov    eax,0x0
 1e7:	e8 00 00 00 00       	call   1ec <main+0xb0>
        for (i = 0; i < sizeof(v32ub) / sizeof(unsigned char); i++) {
 1ec:	83 85 a0 fe ff ff 01 	add    DWORD PTR [rbp-0x160],0x1
 1f3:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
 1f9:	83 f8 1f             	cmp    eax,0x1f
 1fc:	76 c2                	jbe    1c0 <main+0x84>
        }
    }

    putchar('\n');
 1fe:	bf 0a 00 00 00       	mov    edi,0xa
 203:	e8 00 00 00 00       	call   208 <main+0xcc>

    {
        v32us x = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
 208:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 210 <main+0xd4>
 20f:	00 
 210:	c5 fd 7f 85 10 ff ff 	vmovdqa YMMWORD PTR [rbp-0xf0],ymm0
 217:	ff 
        v32us y =
 218:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 220 <main+0xe4>
 21f:	00 
 220:	c5 fd 7f 85 30 ff ff 	vmovdqa YMMWORD PTR [rbp-0xd0],ymm0
 227:	ff 
            { 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
          0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
          0xffff };
        v32us z;

        add32us(x, y, &z);
 228:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 22f:	c5 fd 6f 8d 30 ff ff 	vmovdqa ymm1,YMMWORD PTR [rbp-0xd0]
 236:	ff 
 237:	c5 fd 6f 85 10 ff ff 	vmovdqa ymm0,YMMWORD PTR [rbp-0xf0]
 23e:	ff 
 23f:	48 89 c7             	mov    rdi,rax
 242:	e8 00 00 00 00       	call   247 <main+0x10b>

        int i;

        puts("vector of unsigned short ints");
 247:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 24e <main+0x112>
 24e:	e8 00 00 00 00       	call   253 <main+0x117>

        for (i = 0; i < sizeof(v32us) / sizeof(unsigned short); i++) {
 253:	c7 85 a4 fe ff ff 00 	mov    DWORD PTR [rbp-0x15c],0x0
 25a:	00 00 00 
 25d:	eb 33                	jmp    292 <main+0x156>
            printf("%d %u\n", i, z[i]);
 25f:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
 265:	48 98                	cdqe   
 267:	0f b7 84 45 b0 fe ff 	movzx  eax,WORD PTR [rbp+rax*2-0x150]
 26e:	ff 
 26f:	0f b7 d0             	movzx  edx,ax
 272:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
 278:	89 c6                	mov    esi,eax
 27a:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 281 <main+0x145>
 281:	b8 00 00 00 00       	mov    eax,0x0
 286:	e8 00 00 00 00       	call   28b <main+0x14f>
        for (i = 0; i < sizeof(v32us) / sizeof(unsigned short); i++) {
 28b:	83 85 a4 fe ff ff 01 	add    DWORD PTR [rbp-0x15c],0x1
 292:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
 298:	83 f8 0f             	cmp    eax,0xf
 29b:	76 c2                	jbe    25f <main+0x123>
        }
    }

    putchar('\n');
 29d:	bf 0a 00 00 00       	mov    edi,0xa
 2a2:	e8 00 00 00 00       	call   2a7 <main+0x16b>

    {
        v32ui x = { 0, 1, 2, 3, 4, 5, 6, 7 };
 2a7:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 2af <main+0x173>
 2ae:	00 
 2af:	c5 fd 7f 85 50 ff ff 	vmovdqa YMMWORD PTR [rbp-0xb0],ymm0
 2b6:	ff 
        v32ui y =
 2b7:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 2bf <main+0x183>
 2be:	00 
 2bf:	c5 fd 7f 85 70 ff ff 	vmovdqa YMMWORD PTR [rbp-0x90],ymm0
 2c6:	ff 
            { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
          0xffffffff, 0xffffffff, 0xffffffff };
        v32ui z;

        add32ui(x, y, &z);
 2c7:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 2ce:	c5 fd 6f 8d 70 ff ff 	vmovdqa ymm1,YMMWORD PTR [rbp-0x90]
 2d5:	ff 
 2d6:	c5 fd 6f 85 50 ff ff 	vmovdqa ymm0,YMMWORD PTR [rbp-0xb0]
 2dd:	ff 
 2de:	48 89 c7             	mov    rdi,rax
 2e1:	e8 00 00 00 00       	call   2e6 <main+0x1aa>

        int i;

        puts("vector of unsigned ints");
 2e6:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2ed <main+0x1b1>
 2ed:	e8 00 00 00 00       	call   2f2 <main+0x1b6>

        for (i = 0; i < sizeof(v32ui) / sizeof(unsigned int); i++) {
 2f2:	c7 85 a8 fe ff ff 00 	mov    DWORD PTR [rbp-0x158],0x0
 2f9:	00 00 00 
 2fc:	eb 2f                	jmp    32d <main+0x1f1>
            printf("%d %u\n", i, z[i]);
 2fe:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
 304:	48 98                	cdqe   
 306:	8b 94 85 b0 fe ff ff 	mov    edx,DWORD PTR [rbp+rax*4-0x150]
 30d:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
 313:	89 c6                	mov    esi,eax
 315:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 31c <main+0x1e0>
 31c:	b8 00 00 00 00       	mov    eax,0x0
 321:	e8 00 00 00 00       	call   326 <main+0x1ea>
        for (i = 0; i < sizeof(v32ui) / sizeof(unsigned int); i++) {
 326:	83 85 a8 fe ff ff 01 	add    DWORD PTR [rbp-0x158],0x1
 32d:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
 333:	83 f8 07             	cmp    eax,0x7
 336:	76 c6                	jbe    2fe <main+0x1c2>
        }
    }

    putchar('\n');
 338:	bf 0a 00 00 00       	mov    edi,0xa
 33d:	e8 00 00 00 00       	call   342 <main+0x206>

    {
        v32ul x = { 0, 1, 2, 3 };
 342:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 34a <main+0x20e>
 349:	00 
 34a:	c5 fd 7f 45 90       	vmovdqa YMMWORD PTR [rbp-0x70],ymm0
        v32ul y =
 34f:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 357 <main+0x21b>
 356:	00 
 357:	c5 fd 7f 45 b0       	vmovdqa YMMWORD PTR [rbp-0x50],ymm0
            { 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
          0xffffffffffffffff };
        v32ul z;

        add32ul(x, y, &z);
 35c:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 363:	c5 fd 6f 4d b0       	vmovdqa ymm1,YMMWORD PTR [rbp-0x50]
 368:	c5 fd 6f 45 90       	vmovdqa ymm0,YMMWORD PTR [rbp-0x70]
 36d:	48 89 c7             	mov    rdi,rax
 370:	e8 00 00 00 00       	call   375 <main+0x239>

        int i;

        puts("vector of unsigned longs");
 375:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 37c <main+0x240>
 37c:	e8 00 00 00 00       	call   381 <main+0x245>

        for (i = 0; i < sizeof(v32ul) / sizeof(unsigned long); i++) {
 381:	c7 85 ac fe ff ff 00 	mov    DWORD PTR [rbp-0x154],0x0
 388:	00 00 00 
 38b:	eb 30                	jmp    3bd <main+0x281>
            printf("%d %lu\n", i, z[i]);
 38d:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
 393:	48 98                	cdqe   
 395:	48 8b 94 c5 b0 fe ff 	mov    rdx,QWORD PTR [rbp+rax*8-0x150]
 39c:	ff 
 39d:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
 3a3:	89 c6                	mov    esi,eax
 3a5:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 3ac <main+0x270>
 3ac:	b8 00 00 00 00       	mov    eax,0x0
 3b1:	e8 00 00 00 00       	call   3b6 <main+0x27a>
        for (i = 0; i < sizeof(v32ul) / sizeof(unsigned long); i++) {
 3b6:	83 85 ac fe ff ff 01 	add    DWORD PTR [rbp-0x154],0x1
 3bd:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
 3c3:	83 f8 03             	cmp    eax,0x3
 3c6:	76 c5                	jbe    38d <main+0x251>
        }
    }

    return 0;
 3c8:	b8 00 00 00 00       	mov    eax,0x0
}
 3cd:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
 3d1:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
 3d8:	00 00 
 3da:	74 05                	je     3e1 <main+0x2a5>
 3dc:	e8 00 00 00 00       	call   3e1 <main+0x2a5>
 3e1:	48 81 c4 68 01 00 00 	add    rsp,0x168
 3e8:	41 5a                	pop    r10
 3ea:	5d                   	pop    rbp
 3eb:	49 8d 62 f8          	lea    rsp,[r10-0x8]
 3ef:	c3                   	ret    
