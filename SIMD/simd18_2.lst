
simd18_2.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <add16float>:
#include <stdio.h>

typedef float v16float __attribute__((vector_size(16)));

void add16float(v16float x, v16float y, v16float * z)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
   5:	48 89 e5             	mov    rbp,rsp
   8:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
   c:	0f 29 4d e0          	movaps XMMWORD PTR [rbp-0x20],xmm1
  10:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    *z = x + y;
  14:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  18:	0f 58 45 e0          	addps  xmm0,XMMWORD PTR [rbp-0x20]
  1c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  20:	0f 29 00             	movaps XMMWORD PTR [rax],xmm0
}
  23:	90                   	nop
  24:	5d                   	pop    rbp
  25:	c3                   	ret    

0000000000000026 <sub16float>:

void sub16float(v16float x, v16float y, v16float * z)
{
  26:	f3 0f 1e fa          	endbr64 
  2a:	55                   	push   rbp
  2b:	48 89 e5             	mov    rbp,rsp
  2e:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
  32:	0f 29 4d e0          	movaps XMMWORD PTR [rbp-0x20],xmm1
  36:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    *z = x - y;
  3a:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  3e:	0f 5c 45 e0          	subps  xmm0,XMMWORD PTR [rbp-0x20]
  42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  46:	0f 29 00             	movaps XMMWORD PTR [rax],xmm0
}
  49:	90                   	nop
  4a:	5d                   	pop    rbp
  4b:	c3                   	ret    

000000000000004c <mul16float>:

void mul16float(v16float x, v16float y, v16float * z)
{
  4c:	f3 0f 1e fa          	endbr64 
  50:	55                   	push   rbp
  51:	48 89 e5             	mov    rbp,rsp
  54:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
  58:	0f 29 4d e0          	movaps XMMWORD PTR [rbp-0x20],xmm1
  5c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    *z = x * y;
  60:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  64:	0f 59 45 e0          	mulps  xmm0,XMMWORD PTR [rbp-0x20]
  68:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  6c:	0f 29 00             	movaps XMMWORD PTR [rax],xmm0
}
  6f:	90                   	nop
  70:	5d                   	pop    rbp
  71:	c3                   	ret    

0000000000000072 <div16float>:

void div16float(v16float x, v16float y, v16float * z)
{
  72:	f3 0f 1e fa          	endbr64 
  76:	55                   	push   rbp
  77:	48 89 e5             	mov    rbp,rsp
  7a:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
  7e:	0f 29 4d e0          	movaps XMMWORD PTR [rbp-0x20],xmm1
  82:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    *z = x / y;
  86:	0f 28 45 f0          	movaps xmm0,XMMWORD PTR [rbp-0x10]
  8a:	0f 5e 45 e0          	divps  xmm0,XMMWORD PTR [rbp-0x20]
  8e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  92:	0f 29 00             	movaps XMMWORD PTR [rax],xmm0
}
  95:	90                   	nop
  96:	5d                   	pop    rbp
  97:	c3                   	ret    

0000000000000098 <print_vectors>:

void print_vectors(const char *message, const char op, v16float * x,
                   v16float * y, v16float * z)
{
  98:	f3 0f 1e fa          	endbr64 
  9c:	55                   	push   rbp
  9d:	48 89 e5             	mov    rbp,rsp
  a0:	48 83 ec 40          	sub    rsp,0x40
  a4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  a8:	89 f0                	mov    eax,esi
  aa:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  ae:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  b2:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  b6:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
    int i;

    puts(message);
  b9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  bd:	48 89 c7             	mov    rdi,rax
  c0:	e8 00 00 00 00       	call   c5 <print_vectors+0x2d>
    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
  c5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  cc:	eb 57                	jmp    125 <print_vectors+0x8d>
        printf("%2d    %5.3f %c %5.3f = %5.3f\n", i, (*x)[i], op, (*y)[i], (*z)[i]);
  ce:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  d2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  d5:	48 63 d2             	movsxd rdx,edx
  d8:	f3 0f 10 04 90       	movss  xmm0,DWORD PTR [rax+rdx*4]
  dd:	f3 0f 5a d0          	cvtss2sd xmm2,xmm0
  e1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  e5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  e8:	48 63 d2             	movsxd rdx,edx
  eb:	f3 0f 10 04 90       	movss  xmm0,DWORD PTR [rax+rdx*4]
  f0:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
  f4:	0f be 55 e4          	movsx  edx,BYTE PTR [rbp-0x1c]
  f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  fc:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
  ff:	48 63 c9             	movsxd rcx,ecx
 102:	f3 0f 10 04 88       	movss  xmm0,DWORD PTR [rax+rcx*4]
 107:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
 10b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 10e:	89 c6                	mov    esi,eax
 110:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 117 <print_vectors+0x7f>
 117:	b8 03 00 00 00       	mov    eax,0x3
 11c:	e8 00 00 00 00       	call   121 <print_vectors+0x89>
    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
 121:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
 125:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 128:	83 f8 03             	cmp    eax,0x3
 12b:	76 a1                	jbe    ce <print_vectors+0x36>
    }

    putchar('\n');
 12d:	bf 0a 00 00 00       	mov    edi,0xa
 132:	e8 00 00 00 00       	call   137 <print_vectors+0x9f>
}
 137:	90                   	nop
 138:	c9                   	leave  
 139:	c3                   	ret    

000000000000013a <main>:

int main(void)
{
 13a:	f3 0f 1e fa          	endbr64 
 13e:	55                   	push   rbp
 13f:	48 89 e5             	mov    rbp,rsp
 142:	48 83 ec 50          	sub    rsp,0x50
 146:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 14d:	00 00 
 14f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
 153:	31 c0                	xor    eax,eax
    v16float x;
    v16float y;
    v16float z;
    int i;

    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
 155:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
 15c:	eb 34                	jmp    192 <main+0x58>
        x[i] = i;
 15e:	f3 0f 2a 45 bc       	cvtsi2ss xmm0,DWORD PTR [rbp-0x44]
 163:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
 166:	48 98                	cdqe   
 168:	f3 0f 11 44 85 c0    	movss  DWORD PTR [rbp+rax*4-0x40],xmm0
        y[i] = i + 0.1;
 16e:	f2 0f 2a 4d bc       	cvtsi2sd xmm1,DWORD PTR [rbp-0x44]
 173:	f2 0f 10 05 00 00 00 	movsd  xmm0,QWORD PTR [rip+0x0]        # 17b <main+0x41>
 17a:	00 
 17b:	f2 0f 58 c1          	addsd  xmm0,xmm1
 17f:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
 183:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
 186:	48 98                	cdqe   
 188:	f3 0f 11 44 85 d0    	movss  DWORD PTR [rbp+rax*4-0x30],xmm0
    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
 18e:	83 45 bc 01          	add    DWORD PTR [rbp-0x44],0x1
 192:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
 195:	83 f8 03             	cmp    eax,0x3
 198:	76 c4                	jbe    15e <main+0x24>
    }

    add16float(x, y, &z);
 19a:	0f 28 4d d0          	movaps xmm1,XMMWORD PTR [rbp-0x30]
 19e:	0f 28 45 c0          	movaps xmm0,XMMWORD PTR [rbp-0x40]
 1a2:	48 8d 45 e0          	lea    rax,[rbp-0x20]
 1a6:	48 89 c7             	mov    rdi,rax
 1a9:	e8 00 00 00 00       	call   1ae <main+0x74>
    print_vectors("vector addition", '+', &x, &y, &z);
 1ae:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
 1b2:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
 1b6:	48 8d 45 c0          	lea    rax,[rbp-0x40]
 1ba:	49 89 c8             	mov    r8,rcx
 1bd:	48 89 d1             	mov    rcx,rdx
 1c0:	48 89 c2             	mov    rdx,rax
 1c3:	be 2b 00 00 00       	mov    esi,0x2b
 1c8:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1cf <main+0x95>
 1cf:	e8 00 00 00 00       	call   1d4 <main+0x9a>

    sub16float(x, y, &z);
 1d4:	0f 28 4d d0          	movaps xmm1,XMMWORD PTR [rbp-0x30]
 1d8:	0f 28 45 c0          	movaps xmm0,XMMWORD PTR [rbp-0x40]
 1dc:	48 8d 45 e0          	lea    rax,[rbp-0x20]
 1e0:	48 89 c7             	mov    rdi,rax
 1e3:	e8 00 00 00 00       	call   1e8 <main+0xae>
    print_vectors("vector subtraction", '-', &x, &y, &z);
 1e8:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
 1ec:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
 1f0:	48 8d 45 c0          	lea    rax,[rbp-0x40]
 1f4:	49 89 c8             	mov    r8,rcx
 1f7:	48 89 d1             	mov    rcx,rdx
 1fa:	48 89 c2             	mov    rdx,rax
 1fd:	be 2d 00 00 00       	mov    esi,0x2d
 202:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 209 <main+0xcf>
 209:	e8 00 00 00 00       	call   20e <main+0xd4>

    mul16float(x, y, &z);
 20e:	0f 28 4d d0          	movaps xmm1,XMMWORD PTR [rbp-0x30]
 212:	0f 28 45 c0          	movaps xmm0,XMMWORD PTR [rbp-0x40]
 216:	48 8d 45 e0          	lea    rax,[rbp-0x20]
 21a:	48 89 c7             	mov    rdi,rax
 21d:	e8 00 00 00 00       	call   222 <main+0xe8>
    print_vectors("vector multiply", '*', &x, &y, &z);
 222:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
 226:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
 22a:	48 8d 45 c0          	lea    rax,[rbp-0x40]
 22e:	49 89 c8             	mov    r8,rcx
 231:	48 89 d1             	mov    rcx,rdx
 234:	48 89 c2             	mov    rdx,rax
 237:	be 2a 00 00 00       	mov    esi,0x2a
 23c:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 243 <main+0x109>
 243:	e8 00 00 00 00       	call   248 <main+0x10e>

    div16float(x, y, &z);
 248:	0f 28 4d d0          	movaps xmm1,XMMWORD PTR [rbp-0x30]
 24c:	0f 28 45 c0          	movaps xmm0,XMMWORD PTR [rbp-0x40]
 250:	48 8d 45 e0          	lea    rax,[rbp-0x20]
 254:	48 89 c7             	mov    rdi,rax
 257:	e8 00 00 00 00       	call   25c <main+0x122>
    print_vectors("vector divide", '/', &x, &y, &z);
 25c:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
 260:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
 264:	48 8d 45 c0          	lea    rax,[rbp-0x40]
 268:	49 89 c8             	mov    r8,rcx
 26b:	48 89 d1             	mov    rcx,rdx
 26e:	48 89 c2             	mov    rdx,rax
 271:	be 2f 00 00 00       	mov    esi,0x2f
 276:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 27d <main+0x143>
 27d:	e8 00 00 00 00       	call   282 <main+0x148>

    return 0;
 282:	b8 00 00 00 00       	mov    eax,0x0
}
 287:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
 28b:	64 48 33 34 25 28 00 	xor    rsi,QWORD PTR fs:0x28
 292:	00 00 
 294:	74 05                	je     29b <main+0x161>
 296:	e8 00 00 00 00       	call   29b <main+0x161>
 29b:	c9                   	leave  
 29c:	c3                   	ret    
