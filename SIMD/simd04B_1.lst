
simd04B_1.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
typedef signed short int v16us __attribute__((vector_size(16)));
typedef signed int v16ui __attribute__((vector_size(16)));
typedef signed long int v16ul __attribute__((vector_size(16)));

int main(void)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
   5:	48 89 e5             	mov    rbp,rsp
   8:	48 83 ec 48          	sub    rsp,0x48
    {
        v16ub x = { 1, 2, 3, 4, 5, 6, 7, 8 };
   c:	48 b8 01 02 03 04 05 	movabs rax,0x807060504030201
  13:	06 07 08 
  16:	ba 00 00 00 00       	mov    edx,0x0
  1b:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  22:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
        v16ub y = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
  29:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  30:	ba 00 00 00 00       	mov    edx,0x0
  35:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  3c:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
  43:	48 b8 00 01 02 03 04 	movabs rax,0x706050403020100
  4a:	05 06 07 
  4d:	ba 00 00 00 00       	mov    edx,0x0
        v16ub z = x + y;
  52:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  59:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
    }

    {
        v16us x = { 1, 2, 3, 4, 5, 6, 7, 8 };
  60:	48 b8 01 00 02 00 03 	movabs rax,0x4000300020001
  67:	00 04 00 
  6a:	48 ba 05 00 06 00 07 	movabs rdx,0x8000700060005
  71:	00 08 00 
  74:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  7b:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
        v16us y = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
  82:	48 b8 ff 00 ff 00 ff 	movabs rax,0xff00ff00ff00ff
  89:	00 ff 00 
  8c:	48 ba ff 00 ff 00 ff 	movabs rdx,0xff00ff00ff00ff
  93:	00 ff 00 
  96:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  9a:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  9e:	48 b8 00 01 01 01 02 	movabs rax,0x103010201010100
  a5:	01 03 01 
  a8:	48 ba 04 01 05 01 06 	movabs rdx,0x107010601050104
  af:	01 07 01 
        v16us z = x + y;
  b2:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  b6:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    }

    {
        v16ui x = { 1, 2, 3, 4 };
  ba:	48 b8 01 00 00 00 02 	movabs rax,0x200000001
  c1:	00 00 00 
  c4:	48 ba 03 00 00 00 04 	movabs rdx,0x400000003
  cb:	00 00 00 
  ce:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  d2:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
        v16ui y = { 0xff, 0xff, 0xff, 0xff };
  d6:	48 b8 ff 00 00 00 ff 	movabs rax,0xff000000ff
  dd:	00 00 00 
  e0:	48 ba ff 00 00 00 ff 	movabs rdx,0xff000000ff
  e7:	00 00 00 
  ea:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  ee:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
        v16ui z = x + y;
  f2:	c7 45 c0 00 01 00 00 	mov    DWORD PTR [rbp-0x40],0x100
  f9:	c7 45 c4 01 01 00 00 	mov    DWORD PTR [rbp-0x3c],0x101
 100:	c7 45 c8 02 01 00 00 	mov    DWORD PTR [rbp-0x38],0x102
 107:	c7 45 cc 03 01 00 00 	mov    DWORD PTR [rbp-0x34],0x103
    }

    {
        v16ui x = { 1, 2 };
 10e:	48 b8 01 00 00 00 02 	movabs rax,0x200000001
 115:	00 00 00 
 118:	ba 00 00 00 00       	mov    edx,0x0
 11d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
 121:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
        v16ui y = { 0xff, 0xff };
 125:	48 b8 ff 00 00 00 ff 	movabs rax,0xff000000ff
 12c:	00 00 00 
 12f:	ba 00 00 00 00       	mov    edx,0x0
 134:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
 138:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        v16ui z = x + y;
 13c:	c7 45 f0 00 01 00 00 	mov    DWORD PTR [rbp-0x10],0x100
 143:	c7 45 f4 01 01 00 00 	mov    DWORD PTR [rbp-0xc],0x101
 14a:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
 151:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    }


    return 0;
 158:	b8 00 00 00 00       	mov    eax,0x0
}
 15d:	c9                   	leave  
 15e:	c3                   	ret    
