
simd18_2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <add16float>:
#include <stdio.h>

typedef float v16float __attribute__((vector_size(16)));

void add16float(v16float x, v16float y, v16float * z)
{
   0:	d100c3ff 	sub	sp, sp, #0x30
   4:	3d800be0 	str	q0, [sp, #32]
   8:	3d8007e1 	str	q1, [sp, #16]
   c:	f90007e0 	str	x0, [sp, #8]
    *z = x + y;
  10:	3dc00be1 	ldr	q1, [sp, #32]
  14:	3dc007e0 	ldr	q0, [sp, #16]
  18:	4e20d420 	fadd	v0.4s, v1.4s, v0.4s
  1c:	f94007e0 	ldr	x0, [sp, #8]
  20:	3d800000 	str	q0, [x0]
}
  24:	d503201f 	nop
  28:	9100c3ff 	add	sp, sp, #0x30
  2c:	d65f03c0 	ret

0000000000000030 <sub16float>:

void sub16float(v16float x, v16float y, v16float * z)
{
  30:	d100c3ff 	sub	sp, sp, #0x30
  34:	3d800be0 	str	q0, [sp, #32]
  38:	3d8007e1 	str	q1, [sp, #16]
  3c:	f90007e0 	str	x0, [sp, #8]
    *z = x - y;
  40:	3dc00be1 	ldr	q1, [sp, #32]
  44:	3dc007e0 	ldr	q0, [sp, #16]
  48:	4ea0d420 	fsub	v0.4s, v1.4s, v0.4s
  4c:	f94007e0 	ldr	x0, [sp, #8]
  50:	3d800000 	str	q0, [x0]
}
  54:	d503201f 	nop
  58:	9100c3ff 	add	sp, sp, #0x30
  5c:	d65f03c0 	ret

0000000000000060 <mul16float>:

void mul16float(v16float x, v16float y, v16float * z)
{
  60:	d100c3ff 	sub	sp, sp, #0x30
  64:	3d800be0 	str	q0, [sp, #32]
  68:	3d8007e1 	str	q1, [sp, #16]
  6c:	f90007e0 	str	x0, [sp, #8]
    *z = x * y;
  70:	3dc00be1 	ldr	q1, [sp, #32]
  74:	3dc007e0 	ldr	q0, [sp, #16]
  78:	6e20dc20 	fmul	v0.4s, v1.4s, v0.4s
  7c:	f94007e0 	ldr	x0, [sp, #8]
  80:	3d800000 	str	q0, [x0]
}
  84:	d503201f 	nop
  88:	9100c3ff 	add	sp, sp, #0x30
  8c:	d65f03c0 	ret

0000000000000090 <div16float>:

void div16float(v16float x, v16float y, v16float * z)
{
  90:	d100c3ff 	sub	sp, sp, #0x30
  94:	3d800be0 	str	q0, [sp, #32]
  98:	3d8007e1 	str	q1, [sp, #16]
  9c:	f90007e0 	str	x0, [sp, #8]
    *z = x / y;
  a0:	3dc00be1 	ldr	q1, [sp, #32]
  a4:	3dc007e0 	ldr	q0, [sp, #16]
  a8:	6e20fc20 	fdiv	v0.4s, v1.4s, v0.4s
  ac:	f94007e0 	ldr	x0, [sp, #8]
  b0:	3d800000 	str	q0, [x0]
}
  b4:	d503201f 	nop
  b8:	9100c3ff 	add	sp, sp, #0x30
  bc:	d65f03c0 	ret

00000000000000c0 <print_vectors>:

void print_vectors(const char *message, const char op, v16float * x,
                   v16float * y, v16float * z)
{
  c0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
  c4:	910003fd 	mov	x29, sp
  c8:	f9001fe0 	str	x0, [sp, #56]
  cc:	3900dfe1 	strb	w1, [sp, #55]
  d0:	f90017e2 	str	x2, [sp, #40]
  d4:	f90013e3 	str	x3, [sp, #32]
  d8:	f9000fe4 	str	x4, [sp, #24]
    int i;

    puts(message);
  dc:	f9401fe0 	ldr	x0, [sp, #56]
  e0:	94000000 	bl	0 <puts>
    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
  e4:	b9004fff 	str	wzr, [sp, #76]
  e8:	14000017 	b	144 <print_vectors+0x84>
        printf("%2d    %5.3f %c %5.3f = %5.3f\n", i, (*x)[i], op, (*y)[i],
  ec:	f94017e0 	ldr	x0, [sp, #40]
  f0:	b9804fe1 	ldrsw	x1, [sp, #76]
  f4:	bc617800 	ldr	s0, [x0, x1, lsl #2]
  f8:	1e22c003 	fcvt	d3, s0
  fc:	3940dfe2 	ldrb	w2, [sp, #55]
 100:	f94013e0 	ldr	x0, [sp, #32]
 104:	b9804fe1 	ldrsw	x1, [sp, #76]
 108:	bc617800 	ldr	s0, [x0, x1, lsl #2]
 10c:	1e22c001 	fcvt	d1, s0
               (*z)[i]);
 110:	f9400fe0 	ldr	x0, [sp, #24]
 114:	b9804fe1 	ldrsw	x1, [sp, #76]
 118:	bc617800 	ldr	s0, [x0, x1, lsl #2]
        printf("%2d    %5.3f %c %5.3f = %5.3f\n", i, (*x)[i], op, (*y)[i],
 11c:	1e22c000 	fcvt	d0, s0
 120:	1e604002 	fmov	d2, d0
 124:	1e604060 	fmov	d0, d3
 128:	b9404fe1 	ldr	w1, [sp, #76]
 12c:	90000000 	adrp	x0, 0 <add16float>
 130:	91000000 	add	x0, x0, #0x0
 134:	94000000 	bl	0 <printf>
    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
 138:	b9404fe0 	ldr	w0, [sp, #76]
 13c:	11000400 	add	w0, w0, #0x1
 140:	b9004fe0 	str	w0, [sp, #76]
 144:	b9404fe0 	ldr	w0, [sp, #76]
 148:	71000c1f 	cmp	w0, #0x3
 14c:	54fffd09 	b.ls	ec <print_vectors+0x2c>  // b.plast
    }

    putchar('\n');
 150:	52800140 	mov	w0, #0xa                   	// #10
 154:	94000000 	bl	0 <putchar>
}
 158:	d503201f 	nop
 15c:	a8c57bfd 	ldp	x29, x30, [sp], #80
 160:	d65f03c0 	ret

0000000000000164 <main>:

int main(void)
{
 164:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
 168:	910003fd 	mov	x29, sp
    v16float x;
    v16float y;
    v16float z;
    int i;

    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
 16c:	b9004fff 	str	wzr, [sp, #76]
 170:	14000014 	b	1c0 <main+0x5c>
        x[i] = i;
 174:	bd404fe0 	ldr	s0, [sp, #76]
 178:	5e21d800 	scvtf	s0, s0
 17c:	b9804fe0 	ldrsw	x0, [sp, #76]
 180:	d37ef400 	lsl	x0, x0, #2
 184:	9100c3e1 	add	x1, sp, #0x30
 188:	bc206820 	str	s0, [x1, x0]
        y[i] = i + 0.1;
 18c:	b9404fe0 	ldr	w0, [sp, #76]
 190:	1e620000 	scvtf	d0, w0
 194:	90000000 	adrp	x0, 0 <add16float>
 198:	fd400001 	ldr	d1, [x0]
 19c:	1e612800 	fadd	d0, d0, d1
 1a0:	1e624000 	fcvt	s0, d0
 1a4:	b9804fe0 	ldrsw	x0, [sp, #76]
 1a8:	d37ef400 	lsl	x0, x0, #2
 1ac:	910083e1 	add	x1, sp, #0x20
 1b0:	bc206820 	str	s0, [x1, x0]
    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
 1b4:	b9404fe0 	ldr	w0, [sp, #76]
 1b8:	11000400 	add	w0, w0, #0x1
 1bc:	b9004fe0 	str	w0, [sp, #76]
 1c0:	b9404fe0 	ldr	w0, [sp, #76]
 1c4:	71000c1f 	cmp	w0, #0x3
 1c8:	54fffd69 	b.ls	174 <main+0x10>  // b.plast
    }

    add16float(x, y, &z);
 1cc:	3dc00fe0 	ldr	q0, [sp, #48]
 1d0:	3dc00be1 	ldr	q1, [sp, #32]
 1d4:	910043e0 	add	x0, sp, #0x10
 1d8:	94000000 	bl	0 <add16float>
    print_vectors("vector addition", '+', &x, &y, &z);
 1dc:	910043e2 	add	x2, sp, #0x10
 1e0:	910083e1 	add	x1, sp, #0x20
 1e4:	9100c3e0 	add	x0, sp, #0x30
 1e8:	aa0203e4 	mov	x4, x2
 1ec:	aa0103e3 	mov	x3, x1
 1f0:	aa0003e2 	mov	x2, x0
 1f4:	52800561 	mov	w1, #0x2b                  	// #43
 1f8:	90000000 	adrp	x0, 0 <add16float>
 1fc:	91000000 	add	x0, x0, #0x0
 200:	94000000 	bl	c0 <print_vectors>

    sub16float(x, y, &z);
 204:	3dc00fe0 	ldr	q0, [sp, #48]
 208:	3dc00be1 	ldr	q1, [sp, #32]
 20c:	910043e0 	add	x0, sp, #0x10
 210:	94000000 	bl	30 <sub16float>
    print_vectors("vector subtraction", '-', &x, &y, &z);
 214:	910043e2 	add	x2, sp, #0x10
 218:	910083e1 	add	x1, sp, #0x20
 21c:	9100c3e0 	add	x0, sp, #0x30
 220:	aa0203e4 	mov	x4, x2
 224:	aa0103e3 	mov	x3, x1
 228:	aa0003e2 	mov	x2, x0
 22c:	528005a1 	mov	w1, #0x2d                  	// #45
 230:	90000000 	adrp	x0, 0 <add16float>
 234:	91000000 	add	x0, x0, #0x0
 238:	94000000 	bl	c0 <print_vectors>

    mul16float(x, y, &z);
 23c:	3dc00fe0 	ldr	q0, [sp, #48]
 240:	3dc00be1 	ldr	q1, [sp, #32]
 244:	910043e0 	add	x0, sp, #0x10
 248:	94000000 	bl	60 <mul16float>
    print_vectors("vector multiply", '*', &x, &y, &z);
 24c:	910043e2 	add	x2, sp, #0x10
 250:	910083e1 	add	x1, sp, #0x20
 254:	9100c3e0 	add	x0, sp, #0x30
 258:	aa0203e4 	mov	x4, x2
 25c:	aa0103e3 	mov	x3, x1
 260:	aa0003e2 	mov	x2, x0
 264:	52800541 	mov	w1, #0x2a                  	// #42
 268:	90000000 	adrp	x0, 0 <add16float>
 26c:	91000000 	add	x0, x0, #0x0
 270:	94000000 	bl	c0 <print_vectors>

    div16float(x, y, &z);
 274:	3dc00fe0 	ldr	q0, [sp, #48]
 278:	3dc00be1 	ldr	q1, [sp, #32]
 27c:	910043e0 	add	x0, sp, #0x10
 280:	94000000 	bl	90 <div16float>
    print_vectors("vector divide", '/', &x, &y, &z);
 284:	910043e2 	add	x2, sp, #0x10
 288:	910083e1 	add	x1, sp, #0x20
 28c:	9100c3e0 	add	x0, sp, #0x30
 290:	aa0203e4 	mov	x4, x2
 294:	aa0103e3 	mov	x3, x1
 298:	aa0003e2 	mov	x2, x0
 29c:	528005e1 	mov	w1, #0x2f                  	// #47
 2a0:	90000000 	adrp	x0, 0 <add16float>
 2a4:	91000000 	add	x0, x0, #0x0
 2a8:	94000000 	bl	c0 <print_vectors>

    return 0;
 2ac:	52800000 	mov	w0, #0x0                   	// #0
}
 2b0:	a8c57bfd 	ldp	x29, x30, [sp], #80
 2b4:	d65f03c0 	ret
