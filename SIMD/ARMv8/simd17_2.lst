
simd17_2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <add16ib>:
#include <stdio.h>

typedef signed char v16ib __attribute__((vector_size(16)));

void add16ib(v16ib x, v16ib y, v16ib * z)
{
   0:	d100c3ff 	sub	sp, sp, #0x30
   4:	3d800be0 	str	q0, [sp, #32]
   8:	3d8007e1 	str	q1, [sp, #16]
   c:	f90007e0 	str	x0, [sp, #8]
    *z = x + y;
  10:	3dc00be1 	ldr	q1, [sp, #32]
  14:	3dc007e0 	ldr	q0, [sp, #16]
  18:	4e208420 	add	v0.16b, v1.16b, v0.16b
  1c:	f94007e0 	ldr	x0, [sp, #8]
  20:	3d800000 	str	q0, [x0]
}
  24:	d503201f 	nop
  28:	9100c3ff 	add	sp, sp, #0x30
  2c:	d65f03c0 	ret

0000000000000030 <sub16ib>:

void sub16ib(v16ib x, v16ib y, v16ib * z)
{
  30:	d100c3ff 	sub	sp, sp, #0x30
  34:	3d800be0 	str	q0, [sp, #32]
  38:	3d8007e1 	str	q1, [sp, #16]
  3c:	f90007e0 	str	x0, [sp, #8]
    *z = x - y;
  40:	3dc00be1 	ldr	q1, [sp, #32]
  44:	3dc007e0 	ldr	q0, [sp, #16]
  48:	6e208420 	sub	v0.16b, v1.16b, v0.16b
  4c:	f94007e0 	ldr	x0, [sp, #8]
  50:	3d800000 	str	q0, [x0]
}
  54:	d503201f 	nop
  58:	9100c3ff 	add	sp, sp, #0x30
  5c:	d65f03c0 	ret

0000000000000060 <mul16ib>:

void mul16ib(v16ib x, v16ib y, v16ib * z)
{
  60:	d100c3ff 	sub	sp, sp, #0x30
  64:	3d800be0 	str	q0, [sp, #32]
  68:	3d8007e1 	str	q1, [sp, #16]
  6c:	f90007e0 	str	x0, [sp, #8]
    *z = x * y;
  70:	3dc00be1 	ldr	q1, [sp, #32]
  74:	3dc007e0 	ldr	q0, [sp, #16]
  78:	4e209c20 	mul	v0.16b, v1.16b, v0.16b
  7c:	f94007e0 	ldr	x0, [sp, #8]
  80:	3d800000 	str	q0, [x0]
}
  84:	d503201f 	nop
  88:	9100c3ff 	add	sp, sp, #0x30
  8c:	d65f03c0 	ret

0000000000000090 <div16ib>:

void div16ib(v16ib x, v16ib y, v16ib * z)
{
  90:	d100c3ff 	sub	sp, sp, #0x30
  94:	3d800be0 	str	q0, [sp, #32]
  98:	3d8007e1 	str	q1, [sp, #16]
  9c:	f90007e0 	str	x0, [sp, #8]
  a0:	39c083e1 	ldrsb	w1, [sp, #32]
  a4:	39c043e0 	ldrsb	w0, [sp, #16]
    *z = x / y;
  a8:	1ac00c20 	sdiv	w0, w1, w0
  ac:	13001c10 	sxtb	w16, w0
  b0:	39c087e1 	ldrsb	w1, [sp, #33]
  b4:	39c047e0 	ldrsb	w0, [sp, #17]
  b8:	1ac00c20 	sdiv	w0, w1, w0
  bc:	13001c0f 	sxtb	w15, w0
  c0:	39c08be1 	ldrsb	w1, [sp, #34]
  c4:	39c04be0 	ldrsb	w0, [sp, #18]
  c8:	1ac00c20 	sdiv	w0, w1, w0
  cc:	13001c0e 	sxtb	w14, w0
  d0:	39c08fe1 	ldrsb	w1, [sp, #35]
  d4:	39c04fe0 	ldrsb	w0, [sp, #19]
  d8:	1ac00c20 	sdiv	w0, w1, w0
  dc:	13001c0d 	sxtb	w13, w0
  e0:	39c093e1 	ldrsb	w1, [sp, #36]
  e4:	39c053e0 	ldrsb	w0, [sp, #20]
  e8:	1ac00c20 	sdiv	w0, w1, w0
  ec:	13001c0c 	sxtb	w12, w0
  f0:	39c097e1 	ldrsb	w1, [sp, #37]
  f4:	39c057e0 	ldrsb	w0, [sp, #21]
  f8:	1ac00c20 	sdiv	w0, w1, w0
  fc:	13001c0b 	sxtb	w11, w0
 100:	39c09be1 	ldrsb	w1, [sp, #38]
 104:	39c05be0 	ldrsb	w0, [sp, #22]
 108:	1ac00c20 	sdiv	w0, w1, w0
 10c:	13001c0a 	sxtb	w10, w0
 110:	39c09fe1 	ldrsb	w1, [sp, #39]
 114:	39c05fe0 	ldrsb	w0, [sp, #23]
 118:	1ac00c20 	sdiv	w0, w1, w0
 11c:	13001c09 	sxtb	w9, w0
 120:	39c0a3e1 	ldrsb	w1, [sp, #40]
 124:	39c063e0 	ldrsb	w0, [sp, #24]
 128:	1ac00c20 	sdiv	w0, w1, w0
 12c:	13001c08 	sxtb	w8, w0
 130:	39c0a7e1 	ldrsb	w1, [sp, #41]
 134:	39c067e0 	ldrsb	w0, [sp, #25]
 138:	1ac00c20 	sdiv	w0, w1, w0
 13c:	13001c07 	sxtb	w7, w0
 140:	39c0abe1 	ldrsb	w1, [sp, #42]
 144:	39c06be0 	ldrsb	w0, [sp, #26]
 148:	1ac00c20 	sdiv	w0, w1, w0
 14c:	13001c06 	sxtb	w6, w0
 150:	39c0afe1 	ldrsb	w1, [sp, #43]
 154:	39c06fe0 	ldrsb	w0, [sp, #27]
 158:	1ac00c20 	sdiv	w0, w1, w0
 15c:	13001c05 	sxtb	w5, w0
 160:	39c0b3e1 	ldrsb	w1, [sp, #44]
 164:	39c073e0 	ldrsb	w0, [sp, #28]
 168:	1ac00c20 	sdiv	w0, w1, w0
 16c:	13001c04 	sxtb	w4, w0
 170:	39c0b7e1 	ldrsb	w1, [sp, #45]
 174:	39c077e0 	ldrsb	w0, [sp, #29]
 178:	1ac00c20 	sdiv	w0, w1, w0
 17c:	13001c03 	sxtb	w3, w0
 180:	39c0bbe1 	ldrsb	w1, [sp, #46]
 184:	39c07be0 	ldrsb	w0, [sp, #30]
 188:	1ac00c20 	sdiv	w0, w1, w0
 18c:	13001c02 	sxtb	w2, w0
 190:	39c0bfe1 	ldrsb	w1, [sp, #47]
 194:	39c07fe0 	ldrsb	w0, [sp, #31]
 198:	1ac00c20 	sdiv	w0, w1, w0
 19c:	13001c00 	sxtb	w0, w0
 1a0:	0e010e00 	dup	v0.8b, w16
 1a4:	0e010de1 	dup	v1.8b, w15
 1a8:	6e030420 	mov	v0.b[1], v1.b[0]
 1ac:	0e010dc1 	dup	v1.8b, w14
 1b0:	6e050420 	mov	v0.b[2], v1.b[0]
 1b4:	0e010da1 	dup	v1.8b, w13
 1b8:	6e070420 	mov	v0.b[3], v1.b[0]
 1bc:	0e010d81 	dup	v1.8b, w12
 1c0:	6e090420 	mov	v0.b[4], v1.b[0]
 1c4:	0e010d61 	dup	v1.8b, w11
 1c8:	6e0b0420 	mov	v0.b[5], v1.b[0]
 1cc:	0e010d41 	dup	v1.8b, w10
 1d0:	6e0d0420 	mov	v0.b[6], v1.b[0]
 1d4:	0e010d21 	dup	v1.8b, w9
 1d8:	6e0f0420 	mov	v0.b[7], v1.b[0]
 1dc:	0e010d01 	dup	v1.8b, w8
 1e0:	6e110420 	mov	v0.b[8], v1.b[0]
 1e4:	0e010ce1 	dup	v1.8b, w7
 1e8:	6e130420 	mov	v0.b[9], v1.b[0]
 1ec:	0e010cc1 	dup	v1.8b, w6
 1f0:	6e150420 	mov	v0.b[10], v1.b[0]
 1f4:	0e010ca1 	dup	v1.8b, w5
 1f8:	6e170420 	mov	v0.b[11], v1.b[0]
 1fc:	0e010c81 	dup	v1.8b, w4
 200:	6e190420 	mov	v0.b[12], v1.b[0]
 204:	0e010c61 	dup	v1.8b, w3
 208:	6e1b0420 	mov	v0.b[13], v1.b[0]
 20c:	0e010c41 	dup	v1.8b, w2
 210:	6e1d0420 	mov	v0.b[14], v1.b[0]
 214:	0e010c01 	dup	v1.8b, w0
 218:	6e1f0420 	mov	v0.b[15], v1.b[0]
 21c:	f94007e0 	ldr	x0, [sp, #8]
 220:	3d800000 	str	q0, [x0]
}
 224:	d503201f 	nop
 228:	9100c3ff 	add	sp, sp, #0x30
 22c:	d65f03c0 	ret

0000000000000230 <mod16ib>:

void mod16ib(v16ib x, v16ib y, v16ib * z)
{
 230:	d100c3ff 	sub	sp, sp, #0x30
 234:	3d800be0 	str	q0, [sp, #32]
 238:	3d8007e1 	str	q1, [sp, #16]
 23c:	f90007e0 	str	x0, [sp, #8]
 240:	39c083e0 	ldrsb	w0, [sp, #32]
 244:	39c043e1 	ldrsb	w1, [sp, #16]
    *z = x % y;
 248:	1ac10c02 	sdiv	w2, w0, w1
 24c:	1b017c41 	mul	w1, w2, w1
 250:	4b010000 	sub	w0, w0, w1
 254:	13001c11 	sxtb	w17, w0
 258:	39c087e0 	ldrsb	w0, [sp, #33]
 25c:	39c047e1 	ldrsb	w1, [sp, #17]
 260:	1ac10c02 	sdiv	w2, w0, w1
 264:	1b017c41 	mul	w1, w2, w1
 268:	4b010000 	sub	w0, w0, w1
 26c:	13001c10 	sxtb	w16, w0
 270:	39c08be0 	ldrsb	w0, [sp, #34]
 274:	39c04be1 	ldrsb	w1, [sp, #18]
 278:	1ac10c02 	sdiv	w2, w0, w1
 27c:	1b017c41 	mul	w1, w2, w1
 280:	4b010000 	sub	w0, w0, w1
 284:	13001c0f 	sxtb	w15, w0
 288:	39c08fe0 	ldrsb	w0, [sp, #35]
 28c:	39c04fe1 	ldrsb	w1, [sp, #19]
 290:	1ac10c02 	sdiv	w2, w0, w1
 294:	1b017c41 	mul	w1, w2, w1
 298:	4b010000 	sub	w0, w0, w1
 29c:	13001c0e 	sxtb	w14, w0
 2a0:	39c093e0 	ldrsb	w0, [sp, #36]
 2a4:	39c053e1 	ldrsb	w1, [sp, #20]
 2a8:	1ac10c02 	sdiv	w2, w0, w1
 2ac:	1b017c41 	mul	w1, w2, w1
 2b0:	4b010000 	sub	w0, w0, w1
 2b4:	13001c0d 	sxtb	w13, w0
 2b8:	39c097e0 	ldrsb	w0, [sp, #37]
 2bc:	39c057e1 	ldrsb	w1, [sp, #21]
 2c0:	1ac10c02 	sdiv	w2, w0, w1
 2c4:	1b017c41 	mul	w1, w2, w1
 2c8:	4b010000 	sub	w0, w0, w1
 2cc:	13001c0c 	sxtb	w12, w0
 2d0:	39c09be0 	ldrsb	w0, [sp, #38]
 2d4:	39c05be1 	ldrsb	w1, [sp, #22]
 2d8:	1ac10c02 	sdiv	w2, w0, w1
 2dc:	1b017c41 	mul	w1, w2, w1
 2e0:	4b010000 	sub	w0, w0, w1
 2e4:	13001c0b 	sxtb	w11, w0
 2e8:	39c09fe0 	ldrsb	w0, [sp, #39]
 2ec:	39c05fe1 	ldrsb	w1, [sp, #23]
 2f0:	1ac10c02 	sdiv	w2, w0, w1
 2f4:	1b017c41 	mul	w1, w2, w1
 2f8:	4b010000 	sub	w0, w0, w1
 2fc:	13001c0a 	sxtb	w10, w0
 300:	39c0a3e0 	ldrsb	w0, [sp, #40]
 304:	39c063e1 	ldrsb	w1, [sp, #24]
 308:	1ac10c02 	sdiv	w2, w0, w1
 30c:	1b017c41 	mul	w1, w2, w1
 310:	4b010000 	sub	w0, w0, w1
 314:	13001c09 	sxtb	w9, w0
 318:	39c0a7e0 	ldrsb	w0, [sp, #41]
 31c:	39c067e1 	ldrsb	w1, [sp, #25]
 320:	1ac10c02 	sdiv	w2, w0, w1
 324:	1b017c41 	mul	w1, w2, w1
 328:	4b010000 	sub	w0, w0, w1
 32c:	13001c08 	sxtb	w8, w0
 330:	39c0abe0 	ldrsb	w0, [sp, #42]
 334:	39c06be1 	ldrsb	w1, [sp, #26]
 338:	1ac10c02 	sdiv	w2, w0, w1
 33c:	1b017c41 	mul	w1, w2, w1
 340:	4b010000 	sub	w0, w0, w1
 344:	13001c07 	sxtb	w7, w0
 348:	39c0afe0 	ldrsb	w0, [sp, #43]
 34c:	39c06fe1 	ldrsb	w1, [sp, #27]
 350:	1ac10c02 	sdiv	w2, w0, w1
 354:	1b017c41 	mul	w1, w2, w1
 358:	4b010000 	sub	w0, w0, w1
 35c:	13001c06 	sxtb	w6, w0
 360:	39c0b3e0 	ldrsb	w0, [sp, #44]
 364:	39c073e1 	ldrsb	w1, [sp, #28]
 368:	1ac10c02 	sdiv	w2, w0, w1
 36c:	1b017c41 	mul	w1, w2, w1
 370:	4b010000 	sub	w0, w0, w1
 374:	13001c05 	sxtb	w5, w0
 378:	39c0b7e0 	ldrsb	w0, [sp, #45]
 37c:	39c077e1 	ldrsb	w1, [sp, #29]
 380:	1ac10c02 	sdiv	w2, w0, w1
 384:	1b017c41 	mul	w1, w2, w1
 388:	4b010000 	sub	w0, w0, w1
 38c:	13001c04 	sxtb	w4, w0
 390:	39c0bbe0 	ldrsb	w0, [sp, #46]
 394:	39c07be1 	ldrsb	w1, [sp, #30]
 398:	1ac10c02 	sdiv	w2, w0, w1
 39c:	1b017c41 	mul	w1, w2, w1
 3a0:	4b010000 	sub	w0, w0, w1
 3a4:	13001c03 	sxtb	w3, w0
 3a8:	39c0bfe0 	ldrsb	w0, [sp, #47]
 3ac:	39c07fe1 	ldrsb	w1, [sp, #31]
 3b0:	1ac10c02 	sdiv	w2, w0, w1
 3b4:	1b017c41 	mul	w1, w2, w1
 3b8:	4b010000 	sub	w0, w0, w1
 3bc:	13001c00 	sxtb	w0, w0
 3c0:	0e010e20 	dup	v0.8b, w17
 3c4:	0e010e01 	dup	v1.8b, w16
 3c8:	6e030420 	mov	v0.b[1], v1.b[0]
 3cc:	0e010de1 	dup	v1.8b, w15
 3d0:	6e050420 	mov	v0.b[2], v1.b[0]
 3d4:	0e010dc1 	dup	v1.8b, w14
 3d8:	6e070420 	mov	v0.b[3], v1.b[0]
 3dc:	0e010da1 	dup	v1.8b, w13
 3e0:	6e090420 	mov	v0.b[4], v1.b[0]
 3e4:	0e010d81 	dup	v1.8b, w12
 3e8:	6e0b0420 	mov	v0.b[5], v1.b[0]
 3ec:	0e010d61 	dup	v1.8b, w11
 3f0:	6e0d0420 	mov	v0.b[6], v1.b[0]
 3f4:	0e010d41 	dup	v1.8b, w10
 3f8:	6e0f0420 	mov	v0.b[7], v1.b[0]
 3fc:	0e010d21 	dup	v1.8b, w9
 400:	6e110420 	mov	v0.b[8], v1.b[0]
 404:	0e010d01 	dup	v1.8b, w8
 408:	6e130420 	mov	v0.b[9], v1.b[0]
 40c:	0e010ce1 	dup	v1.8b, w7
 410:	6e150420 	mov	v0.b[10], v1.b[0]
 414:	0e010cc1 	dup	v1.8b, w6
 418:	6e170420 	mov	v0.b[11], v1.b[0]
 41c:	0e010ca1 	dup	v1.8b, w5
 420:	6e190420 	mov	v0.b[12], v1.b[0]
 424:	0e010c81 	dup	v1.8b, w4
 428:	6e1b0420 	mov	v0.b[13], v1.b[0]
 42c:	0e010c61 	dup	v1.8b, w3
 430:	6e1d0420 	mov	v0.b[14], v1.b[0]
 434:	0e010c01 	dup	v1.8b, w0
 438:	6e1f0420 	mov	v0.b[15], v1.b[0]
 43c:	f94007e0 	ldr	x0, [sp, #8]
 440:	3d800000 	str	q0, [x0]
}
 444:	d503201f 	nop
 448:	9100c3ff 	add	sp, sp, #0x30
 44c:	d65f03c0 	ret

0000000000000450 <and16ib>:

void and16ib(v16ib x, v16ib y, v16ib * z)
{
 450:	d100c3ff 	sub	sp, sp, #0x30
 454:	3d800be0 	str	q0, [sp, #32]
 458:	3d8007e1 	str	q1, [sp, #16]
 45c:	f90007e0 	str	x0, [sp, #8]
    *z = x & y;
 460:	3dc00be1 	ldr	q1, [sp, #32]
 464:	3dc007e0 	ldr	q0, [sp, #16]
 468:	4e201c20 	and	v0.16b, v1.16b, v0.16b
 46c:	f94007e0 	ldr	x0, [sp, #8]
 470:	3d800000 	str	q0, [x0]
}
 474:	d503201f 	nop
 478:	9100c3ff 	add	sp, sp, #0x30
 47c:	d65f03c0 	ret

0000000000000480 <or16ib>:

void or16ib(v16ib x, v16ib y, v16ib * z)
{
 480:	d100c3ff 	sub	sp, sp, #0x30
 484:	3d800be0 	str	q0, [sp, #32]
 488:	3d8007e1 	str	q1, [sp, #16]
 48c:	f90007e0 	str	x0, [sp, #8]
    *z = x | y;
 490:	3dc00be1 	ldr	q1, [sp, #32]
 494:	3dc007e0 	ldr	q0, [sp, #16]
 498:	4ea01c20 	orr	v0.16b, v1.16b, v0.16b
 49c:	f94007e0 	ldr	x0, [sp, #8]
 4a0:	3d800000 	str	q0, [x0]
}
 4a4:	d503201f 	nop
 4a8:	9100c3ff 	add	sp, sp, #0x30
 4ac:	d65f03c0 	ret

00000000000004b0 <xor16ib>:

void xor16ib(v16ib x, v16ib y, v16ib * z)
{
 4b0:	d100c3ff 	sub	sp, sp, #0x30
 4b4:	3d800be0 	str	q0, [sp, #32]
 4b8:	3d8007e1 	str	q1, [sp, #16]
 4bc:	f90007e0 	str	x0, [sp, #8]
    *z = x ^ y;
 4c0:	3dc00be1 	ldr	q1, [sp, #32]
 4c4:	3dc007e0 	ldr	q0, [sp, #16]
 4c8:	6e201c20 	eor	v0.16b, v1.16b, v0.16b
 4cc:	f94007e0 	ldr	x0, [sp, #8]
 4d0:	3d800000 	str	q0, [x0]
}
 4d4:	d503201f 	nop
 4d8:	9100c3ff 	add	sp, sp, #0x30
 4dc:	d65f03c0 	ret

00000000000004e0 <rshift16ib>:

void rshift16ib(v16ib x, v16ib y, v16ib * z)
{
 4e0:	d100c3ff 	sub	sp, sp, #0x30
 4e4:	3d800be0 	str	q0, [sp, #32]
 4e8:	3d8007e1 	str	q1, [sp, #16]
 4ec:	f90007e0 	str	x0, [sp, #8]
    *z = x >> y;
 4f0:	3dc00be0 	ldr	q0, [sp, #32]
 4f4:	3dc007e1 	ldr	q1, [sp, #16]
 4f8:	6e20b821 	neg	v1.16b, v1.16b
 4fc:	4e214400 	sshl	v0.16b, v0.16b, v1.16b
 500:	f94007e0 	ldr	x0, [sp, #8]
 504:	3d800000 	str	q0, [x0]
}
 508:	d503201f 	nop
 50c:	9100c3ff 	add	sp, sp, #0x30
 510:	d65f03c0 	ret

0000000000000514 <lshift16ib>:

void lshift16ib(v16ib x, v16ib y, v16ib * z)
{
 514:	d100c3ff 	sub	sp, sp, #0x30
 518:	3d800be0 	str	q0, [sp, #32]
 51c:	3d8007e1 	str	q1, [sp, #16]
 520:	f90007e0 	str	x0, [sp, #8]
    *z = x << y;
 524:	3dc00be1 	ldr	q1, [sp, #32]
 528:	3dc007e0 	ldr	q0, [sp, #16]
 52c:	4e204420 	sshl	v0.16b, v1.16b, v0.16b
 530:	f94007e0 	ldr	x0, [sp, #8]
 534:	3d800000 	str	q0, [x0]
}
 538:	d503201f 	nop
 53c:	9100c3ff 	add	sp, sp, #0x30
 540:	d65f03c0 	ret

0000000000000544 <print_vectors>:

void print_vectors(const char *message, const char *op, v16ib * x,
                   v16ib * y, v16ib * z)
{
 544:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
 548:	910003fd 	mov	x29, sp
 54c:	f9001fe0 	str	x0, [sp, #56]
 550:	f9001be1 	str	x1, [sp, #48]
 554:	f90017e2 	str	x2, [sp, #40]
 558:	f90013e3 	str	x3, [sp, #32]
 55c:	f9000fe4 	str	x4, [sp, #24]
    int i;

    puts(message);
 560:	f9401fe0 	ldr	x0, [sp, #56]
 564:	94000000 	bl	0 <puts>
    for (i = 0; i < sizeof(v16ib) / sizeof(signed char); i++) {
 568:	b9004fff 	str	wzr, [sp, #76]
 56c:	14000016 	b	5c4 <print_vectors+0x80>
        printf("%2d    %d %s %d = %d\n", i, (*x)[i], op, (*y)[i], (*z)[i]);
 570:	f94017e1 	ldr	x1, [sp, #40]
 574:	b9804fe0 	ldrsw	x0, [sp, #76]
 578:	38e06820 	ldrsb	w0, [x1, x0]
 57c:	2a0003e2 	mov	w2, w0
 580:	f94013e1 	ldr	x1, [sp, #32]
 584:	b9804fe0 	ldrsw	x0, [sp, #76]
 588:	38e06820 	ldrsb	w0, [x1, x0]
 58c:	2a0003e3 	mov	w3, w0
 590:	f9400fe1 	ldr	x1, [sp, #24]
 594:	b9804fe0 	ldrsw	x0, [sp, #76]
 598:	38e06820 	ldrsb	w0, [x1, x0]
 59c:	2a0003e5 	mov	w5, w0
 5a0:	2a0303e4 	mov	w4, w3
 5a4:	f9401be3 	ldr	x3, [sp, #48]
 5a8:	b9404fe1 	ldr	w1, [sp, #76]
 5ac:	90000000 	adrp	x0, 0 <add16ib>
 5b0:	91000000 	add	x0, x0, #0x0
 5b4:	94000000 	bl	0 <printf>
    for (i = 0; i < sizeof(v16ib) / sizeof(signed char); i++) {
 5b8:	b9404fe0 	ldr	w0, [sp, #76]
 5bc:	11000400 	add	w0, w0, #0x1
 5c0:	b9004fe0 	str	w0, [sp, #76]
 5c4:	b9404fe0 	ldr	w0, [sp, #76]
 5c8:	71003c1f 	cmp	w0, #0xf
 5cc:	54fffd29 	b.ls	570 <print_vectors+0x2c>  // b.plast
    }

    putchar('\n');
 5d0:	52800140 	mov	w0, #0xa                   	// #10
 5d4:	94000000 	bl	0 <putchar>
}
 5d8:	d503201f 	nop
 5dc:	a8c57bfd 	ldp	x29, x30, [sp], #80
 5e0:	d65f03c0 	ret

00000000000005e4 <main>:

int main(void)
{
 5e4:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
 5e8:	910003fd 	mov	x29, sp
    v16ib x;
    v16ib y;
    v16ib z;
    int i;

    for (i = 0; i < sizeof(v16ib) / sizeof(signed char); i++) {
 5ec:	b9004fff 	str	wzr, [sp, #76]
 5f0:	14000015 	b	644 <main+0x60>
        x[i] = i * 2;
 5f4:	b9404fe0 	ldr	w0, [sp, #76]
 5f8:	12001c00 	and	w0, w0, #0xff
 5fc:	531f1800 	ubfiz	w0, w0, #1, #7
 600:	12001c00 	and	w0, w0, #0xff
 604:	13001c02 	sxtb	w2, w0
 608:	b9804fe0 	ldrsw	x0, [sp, #76]
 60c:	9100c3e1 	add	x1, sp, #0x30
 610:	38206822 	strb	w2, [x1, x0]
        y[i] = 16 - i;
 614:	b9404fe0 	ldr	w0, [sp, #76]
 618:	12001c00 	and	w0, w0, #0xff
 61c:	52800201 	mov	w1, #0x10                  	// #16
 620:	4b000020 	sub	w0, w1, w0
 624:	12001c00 	and	w0, w0, #0xff
 628:	13001c02 	sxtb	w2, w0
 62c:	b9804fe0 	ldrsw	x0, [sp, #76]
 630:	910083e1 	add	x1, sp, #0x20
 634:	38206822 	strb	w2, [x1, x0]
    for (i = 0; i < sizeof(v16ib) / sizeof(signed char); i++) {
 638:	b9404fe0 	ldr	w0, [sp, #76]
 63c:	11000400 	add	w0, w0, #0x1
 640:	b9004fe0 	str	w0, [sp, #76]
 644:	b9404fe0 	ldr	w0, [sp, #76]
 648:	71003c1f 	cmp	w0, #0xf
 64c:	54fffd49 	b.ls	5f4 <main+0x10>  // b.plast
    }

    add16ib(x, y, &z);
 650:	3dc00fe0 	ldr	q0, [sp, #48]
 654:	3dc00be1 	ldr	q1, [sp, #32]
 658:	910043e0 	add	x0, sp, #0x10
 65c:	94000000 	bl	0 <add16ib>
    print_vectors("vector addition", "+", &x, &y, &z);
 660:	910043e2 	add	x2, sp, #0x10
 664:	910083e1 	add	x1, sp, #0x20
 668:	9100c3e0 	add	x0, sp, #0x30
 66c:	aa0203e4 	mov	x4, x2
 670:	aa0103e3 	mov	x3, x1
 674:	aa0003e2 	mov	x2, x0
 678:	90000000 	adrp	x0, 0 <add16ib>
 67c:	91000001 	add	x1, x0, #0x0
 680:	90000000 	adrp	x0, 0 <add16ib>
 684:	91000000 	add	x0, x0, #0x0
 688:	94000000 	bl	544 <print_vectors>

    sub16ib(x, y, &z);
 68c:	3dc00fe0 	ldr	q0, [sp, #48]
 690:	3dc00be1 	ldr	q1, [sp, #32]
 694:	910043e0 	add	x0, sp, #0x10
 698:	94000000 	bl	30 <sub16ib>
    print_vectors("vector subtraction", "-", &x, &y, &z);
 69c:	910043e2 	add	x2, sp, #0x10
 6a0:	910083e1 	add	x1, sp, #0x20
 6a4:	9100c3e0 	add	x0, sp, #0x30
 6a8:	aa0203e4 	mov	x4, x2
 6ac:	aa0103e3 	mov	x3, x1
 6b0:	aa0003e2 	mov	x2, x0
 6b4:	90000000 	adrp	x0, 0 <add16ib>
 6b8:	91000001 	add	x1, x0, #0x0
 6bc:	90000000 	adrp	x0, 0 <add16ib>
 6c0:	91000000 	add	x0, x0, #0x0
 6c4:	94000000 	bl	544 <print_vectors>

    mul16ib(x, y, &z);
 6c8:	3dc00fe0 	ldr	q0, [sp, #48]
 6cc:	3dc00be1 	ldr	q1, [sp, #32]
 6d0:	910043e0 	add	x0, sp, #0x10
 6d4:	94000000 	bl	60 <mul16ib>
    print_vectors("vector multiply", "*", &x, &y, &z);
 6d8:	910043e2 	add	x2, sp, #0x10
 6dc:	910083e1 	add	x1, sp, #0x20
 6e0:	9100c3e0 	add	x0, sp, #0x30
 6e4:	aa0203e4 	mov	x4, x2
 6e8:	aa0103e3 	mov	x3, x1
 6ec:	aa0003e2 	mov	x2, x0
 6f0:	90000000 	adrp	x0, 0 <add16ib>
 6f4:	91000001 	add	x1, x0, #0x0
 6f8:	90000000 	adrp	x0, 0 <add16ib>
 6fc:	91000000 	add	x0, x0, #0x0
 700:	94000000 	bl	544 <print_vectors>

    div16ib(x, y, &z);
 704:	3dc00fe0 	ldr	q0, [sp, #48]
 708:	3dc00be1 	ldr	q1, [sp, #32]
 70c:	910043e0 	add	x0, sp, #0x10
 710:	94000000 	bl	90 <div16ib>
    print_vectors("vector divide", "/", &x, &y, &z);
 714:	910043e2 	add	x2, sp, #0x10
 718:	910083e1 	add	x1, sp, #0x20
 71c:	9100c3e0 	add	x0, sp, #0x30
 720:	aa0203e4 	mov	x4, x2
 724:	aa0103e3 	mov	x3, x1
 728:	aa0003e2 	mov	x2, x0
 72c:	90000000 	adrp	x0, 0 <add16ib>
 730:	91000001 	add	x1, x0, #0x0
 734:	90000000 	adrp	x0, 0 <add16ib>
 738:	91000000 	add	x0, x0, #0x0
 73c:	94000000 	bl	544 <print_vectors>

    mod16ib(x, y, &z);
 740:	3dc00fe0 	ldr	q0, [sp, #48]
 744:	3dc00be1 	ldr	q1, [sp, #32]
 748:	910043e0 	add	x0, sp, #0x10
 74c:	94000000 	bl	230 <mod16ib>
    print_vectors("vector modulo", "%", &x, &y, &z);
 750:	910043e2 	add	x2, sp, #0x10
 754:	910083e1 	add	x1, sp, #0x20
 758:	9100c3e0 	add	x0, sp, #0x30
 75c:	aa0203e4 	mov	x4, x2
 760:	aa0103e3 	mov	x3, x1
 764:	aa0003e2 	mov	x2, x0
 768:	90000000 	adrp	x0, 0 <add16ib>
 76c:	91000001 	add	x1, x0, #0x0
 770:	90000000 	adrp	x0, 0 <add16ib>
 774:	91000000 	add	x0, x0, #0x0
 778:	94000000 	bl	544 <print_vectors>

    and16ib(x, y, &z);
 77c:	3dc00fe0 	ldr	q0, [sp, #48]
 780:	3dc00be1 	ldr	q1, [sp, #32]
 784:	910043e0 	add	x0, sp, #0x10
 788:	94000000 	bl	450 <and16ib>
    print_vectors("vector bitwise and", "&", &x, &y, &z);
 78c:	910043e2 	add	x2, sp, #0x10
 790:	910083e1 	add	x1, sp, #0x20
 794:	9100c3e0 	add	x0, sp, #0x30
 798:	aa0203e4 	mov	x4, x2
 79c:	aa0103e3 	mov	x3, x1
 7a0:	aa0003e2 	mov	x2, x0
 7a4:	90000000 	adrp	x0, 0 <add16ib>
 7a8:	91000001 	add	x1, x0, #0x0
 7ac:	90000000 	adrp	x0, 0 <add16ib>
 7b0:	91000000 	add	x0, x0, #0x0
 7b4:	94000000 	bl	544 <print_vectors>

    or16ib(x, y, &z);
 7b8:	3dc00fe0 	ldr	q0, [sp, #48]
 7bc:	3dc00be1 	ldr	q1, [sp, #32]
 7c0:	910043e0 	add	x0, sp, #0x10
 7c4:	94000000 	bl	480 <or16ib>
    print_vectors("vector bitwise or", "|", &x, &y, &z);
 7c8:	910043e2 	add	x2, sp, #0x10
 7cc:	910083e1 	add	x1, sp, #0x20
 7d0:	9100c3e0 	add	x0, sp, #0x30
 7d4:	aa0203e4 	mov	x4, x2
 7d8:	aa0103e3 	mov	x3, x1
 7dc:	aa0003e2 	mov	x2, x0
 7e0:	90000000 	adrp	x0, 0 <add16ib>
 7e4:	91000001 	add	x1, x0, #0x0
 7e8:	90000000 	adrp	x0, 0 <add16ib>
 7ec:	91000000 	add	x0, x0, #0x0
 7f0:	94000000 	bl	544 <print_vectors>

    xor16ib(x, y, &z);
 7f4:	3dc00fe0 	ldr	q0, [sp, #48]
 7f8:	3dc00be1 	ldr	q1, [sp, #32]
 7fc:	910043e0 	add	x0, sp, #0x10
 800:	94000000 	bl	4b0 <xor16ib>
    print_vectors("vector bitwise xor", "^", &x, &y, &z);
 804:	910043e2 	add	x2, sp, #0x10
 808:	910083e1 	add	x1, sp, #0x20
 80c:	9100c3e0 	add	x0, sp, #0x30
 810:	aa0203e4 	mov	x4, x2
 814:	aa0103e3 	mov	x3, x1
 818:	aa0003e2 	mov	x2, x0
 81c:	90000000 	adrp	x0, 0 <add16ib>
 820:	91000001 	add	x1, x0, #0x0
 824:	90000000 	adrp	x0, 0 <add16ib>
 828:	91000000 	add	x0, x0, #0x0
 82c:	94000000 	bl	544 <print_vectors>

    rshift16ib(x, y, &z);
 830:	3dc00fe0 	ldr	q0, [sp, #48]
 834:	3dc00be1 	ldr	q1, [sp, #32]
 838:	910043e0 	add	x0, sp, #0x10
 83c:	94000000 	bl	4e0 <rshift16ib>
    print_vectors("vector right shift", ">>", &x, &y, &z);
 840:	910043e2 	add	x2, sp, #0x10
 844:	910083e1 	add	x1, sp, #0x20
 848:	9100c3e0 	add	x0, sp, #0x30
 84c:	aa0203e4 	mov	x4, x2
 850:	aa0103e3 	mov	x3, x1
 854:	aa0003e2 	mov	x2, x0
 858:	90000000 	adrp	x0, 0 <add16ib>
 85c:	91000001 	add	x1, x0, #0x0
 860:	90000000 	adrp	x0, 0 <add16ib>
 864:	91000000 	add	x0, x0, #0x0
 868:	94000000 	bl	544 <print_vectors>

    lshift16ib(x, y, &z);
 86c:	3dc00fe0 	ldr	q0, [sp, #48]
 870:	3dc00be1 	ldr	q1, [sp, #32]
 874:	910043e0 	add	x0, sp, #0x10
 878:	94000000 	bl	514 <lshift16ib>
    print_vectors("vector left shift", "<<", &x, &y, &z);
 87c:	910043e2 	add	x2, sp, #0x10
 880:	910083e1 	add	x1, sp, #0x20
 884:	9100c3e0 	add	x0, sp, #0x30
 888:	aa0203e4 	mov	x4, x2
 88c:	aa0103e3 	mov	x3, x1
 890:	aa0003e2 	mov	x2, x0
 894:	90000000 	adrp	x0, 0 <add16ib>
 898:	91000001 	add	x1, x0, #0x0
 89c:	90000000 	adrp	x0, 0 <add16ib>
 8a0:	91000000 	add	x0, x0, #0x0
 8a4:	94000000 	bl	544 <print_vectors>

    return 0;
 8a8:	52800000 	mov	w0, #0x0                   	// #0
}
 8ac:	a8c57bfd 	ldp	x29, x30, [sp], #80
 8b0:	d65f03c0 	ret
