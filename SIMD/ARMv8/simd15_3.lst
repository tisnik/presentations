
simd15_3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <add16float>:
#include <stdio.h>

typedef float v16float __attribute__((vector_size(16)));

void add16float(v16float x, v16float y, v16float * z)
{
   0:	d10083ff 	sub	sp, sp, #0x20
   4:	6d000be1 	stp	d1, d2, [sp]
    *z = x + y;
   8:	2d401be7 	ldp	s7, s6, [sp]
{
   c:	6d0107e0 	stp	d0, d1, [sp, #16]
    *z = x + y;
  10:	2d4113e5 	ldp	s5, s4, [sp, #8]
  14:	2d420be3 	ldp	s3, s2, [sp, #16]
  18:	2d4303e1 	ldp	s1, s0, [sp, #24]
  1c:	1e272863 	fadd	s3, s3, s7
  20:	1e262842 	fadd	s2, s2, s6
  24:	1e252821 	fadd	s1, s1, s5
  28:	1e242800 	fadd	s0, s0, s4
  2c:	2d000803 	stp	s3, s2, [x0]
  30:	2d010001 	stp	s1, s0, [x0, #8]
}
  34:	910083ff 	add	sp, sp, #0x20
  38:	d65f03c0 	ret
  3c:	d503201f 	nop

0000000000000040 <add16double>:

typedef double v16double __attribute__((vector_size(16)));

void add16double(v16double x, v16double y, v16double * z)
{
  40:	d10083ff 	sub	sp, sp, #0x20
  44:	6d000be1 	stp	d1, d2, [sp]
    *z = x + y;
  48:	6d400be3 	ldp	d3, d2, [sp]
{
  4c:	6d0107e0 	stp	d0, d1, [sp, #16]
    *z = x + y;
  50:	6d4103e1 	ldp	d1, d0, [sp, #16]
  54:	1e632821 	fadd	d1, d1, d3
  58:	1e622800 	fadd	d0, d0, d2
  5c:	6d000001 	stp	d1, d0, [x0]
}
  60:	910083ff 	add	sp, sp, #0x20
  64:	d65f03c0 	ret

Disassembly of section .text.startup:

0000000000000000 <main>:
    *z = x + y;
   0:	529999a1 	mov	w1, #0xcccd                	// #52429
   4:	529999a0 	mov	w0, #0xcccd                	// #52429
   8:	72a7b981 	movk	w1, #0x3dcc, lsl #16
   c:	72a7f180 	movk	w0, #0x3f8c, lsl #16

int main(void)
{
  10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    *z = x + y;
  14:	1e270023 	fmov	s3, w1
  18:	1e270002 	fmov	s2, w0
  1c:	528cccc1 	mov	w1, #0x6666                	// #26214
  20:	528cccc0 	mov	w0, #0x6666                	// #26214
  24:	72a808c0 	movk	w0, #0x4046, lsl #16
  28:	72a800c1 	movk	w1, #0x4006, lsl #16
  2c:	1e270000 	fmov	s0, w0
  30:	1e270021 	fmov	s1, w1
{
  34:	910003fd 	mov	x29, sp

        add16float(x, y, &z);

        int i;

        puts("vector of floats");
  38:	90000000 	adrp	x0, 0 <main>
  3c:	91000000 	add	x0, x0, #0x0
{
  40:	a90153f3 	stp	x19, x20, [sp, #16]
  44:	90000014 	adrp	x20, 0 <main>

        for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
  48:	52800013 	mov	w19, #0x0                   	// #0
  4c:	91000294 	add	x20, x20, #0x0
{
  50:	f90013f5 	str	x21, [sp, #32]
  54:	9100c3f5 	add	x21, sp, #0x30
    *z = x + y;
  58:	2d060be3 	stp	s3, s2, [sp, #48]
  5c:	2d0703e1 	stp	s1, s0, [sp, #56]
        puts("vector of floats");
  60:	94000000 	bl	0 <puts>
            printf("%d %f\n", i, z[i]);
  64:	bc4046a0 	ldr	s0, [x21], #4
  68:	2a1303e1 	mov	w1, w19
  6c:	aa1403e0 	mov	x0, x20
        for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
  70:	11000673 	add	w19, w19, #0x1
            printf("%d %f\n", i, z[i]);
  74:	1e22c000 	fcvt	d0, s0
  78:	94000000 	bl	0 <printf>
        for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
  7c:	7100127f 	cmp	w19, #0x4
  80:	54ffff21 	b.ne	64 <main+0x64>  // b.any

/* Write a character to stdout.  */
__STDIO_INLINE int
putchar (int __c)
{
  return putc (__c, stdout);
  84:	90000001 	adrp	x1, 0 <stdout>
  88:	52800140 	mov	w0, #0xa                   	// #10
  8c:	f9400021 	ldr	x1, [x1]
  90:	94000000 	bl	0 <putc>

        add16double(x, y, &z);

        int i;

        puts("vector of doubles");
  94:	90000000 	adrp	x0, 0 <main>
  98:	91000000 	add	x0, x0, #0x0
  9c:	94000000 	bl	0 <puts>

        for (i = 0; i < sizeof(v16double) / sizeof(double); i++) {
            printf("%d %f\n", i, z[i]);
  a0:	90000000 	adrp	x0, 0 <main>
  a4:	52800001 	mov	w1, #0x0                   	// #0
  a8:	fd400000 	ldr	d0, [x0]
  ac:	aa1403e0 	mov	x0, x20
  b0:	94000000 	bl	0 <printf>
  b4:	90000000 	adrp	x0, 0 <main>
  b8:	52800021 	mov	w1, #0x1                   	// #1
  bc:	fd400000 	ldr	d0, [x0]
  c0:	aa1403e0 	mov	x0, x20
  c4:	94000000 	bl	0 <printf>
        }
    }
    return 0;
}
  c8:	a94153f3 	ldp	x19, x20, [sp, #16]
  cc:	52800000 	mov	w0, #0x0                   	// #0
  d0:	f94013f5 	ldr	x21, [sp, #32]
  d4:	a8c47bfd 	ldp	x29, x30, [sp], #64
  d8:	d65f03c0 	ret
