
intrinsic_sse_3.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
#include <stdio.h>
#include <xmmintrin.h>

int main(void)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
   5:	48 89 e5             	mov    rbp,rsp
   8:	48 83 ec 50          	sub    rsp,0x50
   c:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  13:	00 00 
  15:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  19:	31 c0                	xor    eax,eax
    __v4si x = { 1, 2, 3, 4 };
  1b:	66 0f 6f 05 00 00 00 	movdqa xmm0,XMMWORD PTR [rip+0x0]        # 23 <main+0x23>
  22:	00 
  23:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
    __v4si y = x;
  27:	66 0f 6f 45 c0       	movdqa xmm0,XMMWORD PTR [rbp-0x40]
  2c:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
    __v4si z;
    int i;

    z = __builtin_ia32_paddd128(x, y);
  30:	66 0f 6f 45 d0       	movdqa xmm0,XMMWORD PTR [rbp-0x30]
  35:	66 0f 6f 4d c0       	movdqa xmm1,XMMWORD PTR [rbp-0x40]
  3a:	66 0f fe c1          	paddd  xmm0,xmm1
  3e:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0

    for (i = 0; i < sizeof(x)/sizeof(int); i++) {
  42:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
  49:	eb 38                	jmp    83 <main+0x83>
        printf("%2d %2d %2d %2d\n", i, x[i], y[i], z[i]);
  4b:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  4e:	48 98                	cdqe   
  50:	8b 74 85 e0          	mov    esi,DWORD PTR [rbp+rax*4-0x20]
  54:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  57:	48 98                	cdqe   
  59:	8b 4c 85 d0          	mov    ecx,DWORD PTR [rbp+rax*4-0x30]
  5d:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  60:	48 98                	cdqe   
  62:	8b 54 85 c0          	mov    edx,DWORD PTR [rbp+rax*4-0x40]
  66:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  69:	41 89 f0             	mov    r8d,esi
  6c:	89 c6                	mov    esi,eax
  6e:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 75 <main+0x75>
  75:	b8 00 00 00 00       	mov    eax,0x0
  7a:	e8 00 00 00 00       	call   7f <main+0x7f>
    for (i = 0; i < sizeof(x)/sizeof(int); i++) {
  7f:	83 45 bc 01          	add    DWORD PTR [rbp-0x44],0x1
  83:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  86:	83 f8 03             	cmp    eax,0x3
  89:	76 c0                	jbe    4b <main+0x4b>
  8b:	b8 00 00 00 00       	mov    eax,0x0
    }
}
  90:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  94:	64 48 33 3c 25 28 00 	xor    rdi,QWORD PTR fs:0x28
  9b:	00 00 
  9d:	74 05                	je     a4 <main+0xa4>
  9f:	e8 00 00 00 00       	call   a4 <main+0xa4>
  a4:	c9                   	leave  
  a5:	c3                   	ret    
