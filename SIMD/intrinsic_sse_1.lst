
intrinsic_sse_1.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
#include <stdio.h>
#include <xmmintrin.h>

int main(void)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
   5:	48 89 e5             	mov    rbp,rsp
   8:	48 83 ec 50          	sub    rsp,0x50
   c:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  13:	00 00 
  15:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  19:	31 c0                	xor    eax,eax
    __v16qi x = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
  1b:	66 0f 6f 05 00 00 00 	movdqa xmm0,XMMWORD PTR [rip+0x0]        # 23 <main+0x23>
  22:	00 
  23:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
    __v16qi y = x;
  27:	66 0f 6f 45 c0       	movdqa xmm0,XMMWORD PTR [rbp-0x40]
  2c:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
    __v16qi z;
    int i;

    z = __builtin_ia32_paddb128(x, y);
  30:	66 0f 6f 45 d0       	movdqa xmm0,XMMWORD PTR [rbp-0x30]
  35:	66 0f 6f 4d c0       	movdqa xmm1,XMMWORD PTR [rbp-0x40]
  3a:	66 0f fc c1          	paddb  xmm0,xmm1
  3e:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0

    for (i = 0; i < sizeof(x) / sizeof(char); i++) {
  42:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
  49:	eb 44                	jmp    8f <main+0x8f>
        printf("%2d %2d %2d %2d\n", i, x[i], y[i], z[i]);
  4b:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  4e:	48 98                	cdqe   
  50:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
  55:	0f be f0             	movsx  esi,al
  58:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  5b:	48 98                	cdqe   
  5d:	0f b6 44 05 d0       	movzx  eax,BYTE PTR [rbp+rax*1-0x30]
  62:	0f be c8             	movsx  ecx,al
  65:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  68:	48 98                	cdqe   
  6a:	0f b6 44 05 c0       	movzx  eax,BYTE PTR [rbp+rax*1-0x40]
  6f:	0f be d0             	movsx  edx,al
  72:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  75:	41 89 f0             	mov    r8d,esi
  78:	89 c6                	mov    esi,eax
  7a:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 81 <main+0x81>
  81:	b8 00 00 00 00       	mov    eax,0x0
  86:	e8 00 00 00 00       	call   8b <main+0x8b>
    for (i = 0; i < sizeof(x) / sizeof(char); i++) {
  8b:	83 45 bc 01          	add    DWORD PTR [rbp-0x44],0x1
  8f:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  92:	83 f8 0f             	cmp    eax,0xf
  95:	76 b4                	jbe    4b <main+0x4b>
  97:	b8 00 00 00 00       	mov    eax,0x0
    }
}
  9c:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
  a0:	64 48 33 3c 25 28 00 	xor    rdi,QWORD PTR fs:0x28
  a7:	00 00 
  a9:	74 05                	je     b0 <main+0xb0>
  ab:	e8 00 00 00 00       	call   b0 <main+0xb0>
  b0:	c9                   	leave  
  b1:	c3                   	ret    
