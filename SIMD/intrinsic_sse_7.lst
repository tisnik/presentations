
intrinsic_sse_7.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <print_results>:
#include <stdio.h>
#include <xmmintrin.h>

void print_results(const char *title, __v16qi * x, __v16qi * y,
                   __v16qi * z)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
   5:	48 89 e5             	mov    rbp,rsp
   8:	48 83 ec 30          	sub    rsp,0x30
   c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  10:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  14:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  18:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    int i;

    puts(title);
  1c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  20:	48 89 c7             	mov    rdi,rax
  23:	e8 00 00 00 00       	call   28 <print_results+0x28>
    for (i = 0; i < sizeof(*x) / sizeof(char); i++) {
  28:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  2f:	eb 5e                	jmp    8f <print_results+0x8f>
        printf("%2d %2d %2d  %s\n", i, (*x)[i], (*y)[i],
               (*z)[i] == 0 ? "no" : "yes");
  31:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  35:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  38:	48 98                	cdqe   
  3a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
        printf("%2d %2d %2d  %s\n", i, (*x)[i], (*y)[i],
  3e:	84 c0                	test   al,al
  40:	75 09                	jne    4b <print_results+0x4b>
  42:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 49 <print_results+0x49>
  49:	eb 07                	jmp    52 <print_results+0x52>
  4b:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 52 <print_results+0x52>
  52:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  56:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  59:	48 63 d2             	movsxd rdx,edx
  5c:	0f b6 14 11          	movzx  edx,BYTE PTR [rcx+rdx*1]
  60:	0f be ca             	movsx  ecx,dl
  63:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  67:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  6a:	48 63 d2             	movsxd rdx,edx
  6d:	0f b6 14 16          	movzx  edx,BYTE PTR [rsi+rdx*1]
  71:	0f be d2             	movsx  edx,dl
  74:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
  77:	49 89 c0             	mov    r8,rax
  7a:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 81 <print_results+0x81>
  81:	b8 00 00 00 00       	mov    eax,0x0
  86:	e8 00 00 00 00       	call   8b <print_results+0x8b>
    for (i = 0; i < sizeof(*x) / sizeof(char); i++) {
  8b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  8f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  92:	83 f8 0f             	cmp    eax,0xf
  95:	76 9a                	jbe    31 <print_results+0x31>
    }

    putchar('\n');
  97:	bf 0a 00 00 00       	mov    edi,0xa
  9c:	e8 00 00 00 00       	call   a1 <print_results+0xa1>
}
  a1:	90                   	nop
  a2:	c9                   	leave  
  a3:	c3                   	ret    

00000000000000a4 <main>:

int main(void)
{
  a4:	f3 0f 1e fa          	endbr64 
  a8:	55                   	push   rbp
  a9:	48 89 e5             	mov    rbp,rsp
  ac:	48 83 ec 40          	sub    rsp,0x40
  b0:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  b7:	00 00 
  b9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  bd:	31 c0                	xor    eax,eax
    __v16qi x = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
  bf:	66 0f 6f 05 00 00 00 	movdqa xmm0,XMMWORD PTR [rip+0x0]        # c7 <main+0x23>
  c6:	00 
  c7:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
    __v16qi y = { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 };
  cb:	66 0f 6f 05 00 00 00 	movdqa xmm0,XMMWORD PTR [rip+0x0]        # d3 <main+0x2f>
  d2:	00 
  d3:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
    __v16qi z;

    z = __builtin_ia32_pcmpeqb128(x, y);
  d7:	66 0f 6f 45 d0       	movdqa xmm0,XMMWORD PTR [rbp-0x30]
  dc:	66 0f 6f 4d c0       	movdqa xmm1,XMMWORD PTR [rbp-0x40]
  e1:	66 0f 74 c1          	pcmpeqb xmm0,xmm1
  e5:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0
    print_results(" #  x  y  x==y?", &x, &y, &z);
  e9:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
  ed:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
  f1:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  f5:	48 89 c6             	mov    rsi,rax
  f8:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # ff <main+0x5b>
  ff:	e8 00 00 00 00       	call   104 <main+0x60>

    z = __builtin_ia32_pcmpgtb128(x, y);
 104:	66 0f 6f 4d d0       	movdqa xmm1,XMMWORD PTR [rbp-0x30]
 109:	66 0f 6f 45 c0       	movdqa xmm0,XMMWORD PTR [rbp-0x40]
 10e:	66 0f 64 c1          	pcmpgtb xmm0,xmm1
 112:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0
    print_results(" #  x  y  x>y?", &x, &y, &z);
 116:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
 11a:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
 11e:	48 8d 45 c0          	lea    rax,[rbp-0x40]
 122:	48 89 c6             	mov    rsi,rax
 125:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 12c <main+0x88>
 12c:	e8 00 00 00 00       	call   131 <main+0x8d>
 131:	b8 00 00 00 00       	mov    eax,0x0
}
 136:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
 13a:	64 48 33 34 25 28 00 	xor    rsi,QWORD PTR fs:0x28
 141:	00 00 
 143:	74 05                	je     14a <main+0xa6>
 145:	e8 00 00 00 00       	call   14a <main+0xa6>
 14a:	c9                   	leave  
 14b:	c3                   	ret    
