
simd18_4.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <add16float>:
#include <stdio.h>

typedef float v16float __attribute__((vector_size(16)));

void add16float(v16float x, v16float y, v16float * z)
{
   0:	f3 0f 1e fa          	endbr64 
    *z = x + y;
   4:	0f 58 c1             	addps  xmm0,xmm1
   7:	0f 29 07             	movaps XMMWORD PTR [rdi],xmm0
}
   a:	c3                   	ret    
   b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000010 <sub16float>:

void sub16float(v16float x, v16float y, v16float * z)
{
  10:	f3 0f 1e fa          	endbr64 
    *z = x - y;
  14:	0f 5c c1             	subps  xmm0,xmm1
  17:	0f 29 07             	movaps XMMWORD PTR [rdi],xmm0
}
  1a:	c3                   	ret    
  1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000020 <mul16float>:

void mul16float(v16float x, v16float y, v16float * z)
{
  20:	f3 0f 1e fa          	endbr64 
    *z = x * y;
  24:	0f 59 c1             	mulps  xmm0,xmm1
  27:	0f 29 07             	movaps XMMWORD PTR [rdi],xmm0
}
  2a:	c3                   	ret    
  2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000030 <div16float>:

void div16float(v16float x, v16float y, v16float * z)
{
  30:	f3 0f 1e fa          	endbr64 
    *z = x / y;
  34:	0f 5e c1             	divps  xmm0,xmm1
  37:	0f 29 07             	movaps XMMWORD PTR [rdi],xmm0
}
  3a:	c3                   	ret    
  3b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000040 <print_vectors>:

void print_vectors(const char *message, const char op, v16float * x,
                   v16float * y, v16float * z)
{
  40:	f3 0f 1e fa          	endbr64 
  44:	41 57                	push   r15
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  46:	4c 8d 3d 00 00 00 00 	lea    r15,[rip+0x0]        # 4d <print_vectors+0xd>
  4d:	41 56                	push   r14
  4f:	49 89 d6             	mov    r14,rdx
  52:	41 55                	push   r13
  54:	49 89 cd             	mov    r13,rcx
  57:	41 54                	push   r12
  59:	4d 89 c4             	mov    r12,r8
  5c:	55                   	push   rbp
  5d:	89 f5                	mov    ebp,esi
  5f:	53                   	push   rbx
  60:	40 0f be ed          	movsx  ebp,bpl
    int i;

    puts(message);
  64:	31 db                	xor    ebx,ebx
{
  66:	48 83 ec 08          	sub    rsp,0x8
    puts(message);
  6a:	e8 00 00 00 00       	call   6f <print_vectors+0x2f>
    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
        printf("%2d    %5.3f %c %5.3f = %5.3f\n", i, (*x)[i], op, (*y)[i], (*z)[i]);
  6f:	66 0f ef c0          	pxor   xmm0,xmm0
  73:	66 0f ef d2          	pxor   xmm2,xmm2
  77:	66 0f ef c9          	pxor   xmm1,xmm1
  7b:	89 da                	mov    edx,ebx
  7d:	f3 41 0f 5a 04 9e    	cvtss2sd xmm0,DWORD PTR [r14+rbx*4]
  83:	f3 41 0f 5a 14 9c    	cvtss2sd xmm2,DWORD PTR [r12+rbx*4]
  89:	89 e9                	mov    ecx,ebp
  8b:	4c 89 fe             	mov    rsi,r15
  8e:	f3 41 0f 5a 4c 9d 00 	cvtss2sd xmm1,DWORD PTR [r13+rbx*4+0x0]
  95:	bf 01 00 00 00       	mov    edi,0x1
  9a:	b8 03 00 00 00       	mov    eax,0x3
  9f:	48 83 c3 01          	add    rbx,0x1
  a3:	e8 00 00 00 00       	call   a8 <print_vectors+0x68>
    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
  a8:	48 83 fb 04          	cmp    rbx,0x4
  ac:	75 c1                	jne    6f <print_vectors+0x2f>

/* Write a character to stdout.  */
__STDIO_INLINE int
putchar (int __c)
{
  return putc (__c, stdout);
  ae:	48 8b 35 00 00 00 00 	mov    rsi,QWORD PTR [rip+0x0]        # b5 <print_vectors+0x75>
    }

    putchar('\n');
}
  b5:	48 83 c4 08          	add    rsp,0x8
  b9:	bf 0a 00 00 00       	mov    edi,0xa
  be:	5b                   	pop    rbx
  bf:	5d                   	pop    rbp
  c0:	41 5c                	pop    r12
  c2:	41 5d                	pop    r13
  c4:	41 5e                	pop    r14
  c6:	41 5f                	pop    r15
  c8:	e9 00 00 00 00       	jmp    cd <print_vectors+0x8d>

Disassembly of section .text.startup:

0000000000000000 <main>:

int main(void)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   r13
        x[i] = i;
        y[i] = i + 0.1;
    }

    add16float(x, y, &z);
    print_vectors("vector addition", '+', &x, &y, &z);
   6:	be 2b 00 00 00       	mov    esi,0x2b
   b:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 12 <main+0x12>
{
  12:	41 54                	push   r12
  14:	53                   	push   rbx
  15:	48 83 ec 40          	sub    rsp,0x40
        x[i] = i;
  19:	0f 28 05 00 00 00 00 	movaps xmm0,XMMWORD PTR [rip+0x0]        # 20 <main+0x20>
{
  20:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  27:	00 00 
  29:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
  2e:	31 c0                	xor    eax,eax
    print_vectors("vector addition", '+', &x, &y, &z);
  30:	48 8d 5c 24 20       	lea    rbx,[rsp+0x20]
  35:	4c 8d 6c 24 10       	lea    r13,[rsp+0x10]
  3a:	49 89 e4             	mov    r12,rsp
        x[i] = i;
  3d:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
    print_vectors("vector addition", '+', &x, &y, &z);
  41:	49 89 d8             	mov    r8,rbx
  44:	4c 89 e9             	mov    rcx,r13
  47:	4c 89 e2             	mov    rdx,r12
        y[i] = i + 0.1;
  4a:	0f 28 05 00 00 00 00 	movaps xmm0,XMMWORD PTR [rip+0x0]        # 51 <main+0x51>
  51:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
    *z = x + y;
  56:	0f 28 05 00 00 00 00 	movaps xmm0,XMMWORD PTR [rip+0x0]        # 5d <main+0x5d>
  5d:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    print_vectors("vector addition", '+', &x, &y, &z);
  62:	e8 00 00 00 00       	call   67 <main+0x67>
    *z = x - y;
  67:	0f 28 04 24          	movaps xmm0,XMMWORD PTR [rsp]

    sub16float(x, y, &z);
    print_vectors("vector subtraction", '-', &x, &y, &z);
  6b:	49 89 d8             	mov    r8,rbx
  6e:	4c 89 e9             	mov    rcx,r13
    *z = x - y;
  71:	0f 5c 44 24 10       	subps  xmm0,XMMWORD PTR [rsp+0x10]
    print_vectors("vector subtraction", '-', &x, &y, &z);
  76:	4c 89 e2             	mov    rdx,r12
  79:	be 2d 00 00 00       	mov    esi,0x2d
  7e:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 85 <main+0x85>
    *z = x - y;
  85:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    print_vectors("vector subtraction", '-', &x, &y, &z);
  8a:	e8 00 00 00 00       	call   8f <main+0x8f>
    *z = x * y;
  8f:	0f 28 44 24 10       	movaps xmm0,XMMWORD PTR [rsp+0x10]

    mul16float(x, y, &z);
    print_vectors("vector multiply", '*', &x, &y, &z);
  94:	49 89 d8             	mov    r8,rbx
  97:	4c 89 e9             	mov    rcx,r13
    *z = x * y;
  9a:	0f 59 04 24          	mulps  xmm0,XMMWORD PTR [rsp]
    print_vectors("vector multiply", '*', &x, &y, &z);
  9e:	4c 89 e2             	mov    rdx,r12
  a1:	be 2a 00 00 00       	mov    esi,0x2a
  a6:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # ad <main+0xad>
    *z = x * y;
  ad:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    print_vectors("vector multiply", '*', &x, &y, &z);
  b2:	e8 00 00 00 00       	call   b7 <main+0xb7>

    div16float(x, y, &z);
    print_vectors("vector divide", '/', &x, &y, &z);
  b7:	49 89 d8             	mov    r8,rbx
  ba:	4c 89 e9             	mov    rcx,r13
  bd:	4c 89 e2             	mov    rdx,r12
  c0:	be 2f 00 00 00       	mov    esi,0x2f
  c5:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # cc <main+0xcc>
    *z = x / y;
  cc:	0f 28 04 24          	movaps xmm0,XMMWORD PTR [rsp]
  d0:	0f 5e 44 24 10       	divps  xmm0,XMMWORD PTR [rsp+0x10]
  d5:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    print_vectors("vector divide", '/', &x, &y, &z);
  da:	e8 00 00 00 00       	call   df <main+0xdf>

    return 0;
}
  df:	48 8b 44 24 38       	mov    rax,QWORD PTR [rsp+0x38]
  e4:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  eb:	00 00 
  ed:	75 0c                	jne    fb <main+0xfb>
  ef:	48 83 c4 40          	add    rsp,0x40
  f3:	31 c0                	xor    eax,eax
  f5:	5b                   	pop    rbx
  f6:	41 5c                	pop    r12
  f8:	41 5d                	pop    r13
  fa:	c3                   	ret    
  fb:	e8 00 00 00 00       	call   100 <print_vectors+0xc0>
