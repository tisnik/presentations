
intrinsic_sse_6.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
#include <stdio.h>
#include <xmmintrin.h>

int main(void)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
   5:	48 89 e5             	mov    rbp,rsp
   8:	48 83 ec 50          	sub    rsp,0x50
   c:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  13:	00 00 
  15:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  19:	31 c0                	xor    eax,eax
    __v2df x = { 1.0, 2.0 };
  1b:	66 0f 28 05 00 00 00 	movapd xmm0,XMMWORD PTR [rip+0x0]        # 23 <main+0x23>
  22:	00 
  23:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
    __v2df y = { 0.1, 0.1 };
  27:	66 0f 28 05 00 00 00 	movapd xmm0,XMMWORD PTR [rip+0x0]        # 2f <main+0x2f>
  2e:	00 
  2f:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
    __v2df z;
    int i;

    z = __builtin_ia32_addpd(x, y);
  33:	66 0f 28 45 d0       	movapd xmm0,XMMWORD PTR [rbp-0x30]
  38:	66 0f 28 4d c0       	movapd xmm1,XMMWORD PTR [rbp-0x40]
  3d:	66 0f 58 c1          	addpd  xmm0,xmm1
  41:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0

    for (i = 0; i < sizeof(x) / sizeof(double); i++) {
  45:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
  4c:	eb 47                	jmp    95 <main+0x95>
        printf("%2d %lf %lf %lf\n", i, x[i], y[i], z[i]);
  4e:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  51:	48 98                	cdqe   
  53:	f2 0f 10 4c c5 e0    	movsd  xmm1,QWORD PTR [rbp+rax*8-0x20]
  59:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  5c:	48 98                	cdqe   
  5e:	f2 0f 10 44 c5 d0    	movsd  xmm0,QWORD PTR [rbp+rax*8-0x30]
  64:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  67:	48 98                	cdqe   
  69:	48 8b 54 c5 c0       	mov    rdx,QWORD PTR [rbp+rax*8-0x40]
  6e:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  71:	66 0f 28 d1          	movapd xmm2,xmm1
  75:	66 0f 28 c8          	movapd xmm1,xmm0
  79:	66 48 0f 6e c2       	movq   xmm0,rdx
  7e:	89 c6                	mov    esi,eax
  80:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 87 <main+0x87>
  87:	b8 03 00 00 00       	mov    eax,0x3
  8c:	e8 00 00 00 00       	call   91 <main+0x91>
    for (i = 0; i < sizeof(x) / sizeof(double); i++) {
  91:	83 45 bc 01          	add    DWORD PTR [rbp-0x44],0x1
  95:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  98:	83 f8 01             	cmp    eax,0x1
  9b:	76 b1                	jbe    4e <main+0x4e>
  9d:	b8 00 00 00 00       	mov    eax,0x0
    }
}
  a2:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  a6:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
  ad:	00 00 
  af:	74 05                	je     b6 <main+0xb6>
  b1:	e8 00 00 00 00       	call   b6 <main+0xb6>
  b6:	c9                   	leave  
  b7:	c3                   	ret    
