
simd19_avx2.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <add32ub>:
#include <stdio.h>

typedef unsigned char v32ub __attribute__((vector_size(32)));

void add32ub(v32ub x, v32ub y, v32ub * z)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
   5:	48 89 e5             	mov    rbp,rsp
   8:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
   c:	c5 fd 7f 44 24 e0    	vmovdqa YMMWORD PTR [rsp-0x20],ymm0
  12:	c5 fd 7f 4c 24 c0    	vmovdqa YMMWORD PTR [rsp-0x40],ymm1
  18:	48 89 7c 24 b8       	mov    QWORD PTR [rsp-0x48],rdi
    *z = x + y;
  1d:	c5 fd 6f 44 24 e0    	vmovdqa ymm0,YMMWORD PTR [rsp-0x20]
  23:	c5 fd fc 44 24 c0    	vpaddb ymm0,ymm0,YMMWORD PTR [rsp-0x40]
  29:	48 8b 44 24 b8       	mov    rax,QWORD PTR [rsp-0x48]
  2e:	c5 fd 7f 00          	vmovdqa YMMWORD PTR [rax],ymm0
}
  32:	90                   	nop
  33:	c9                   	leave  
  34:	c3                   	ret    

0000000000000035 <add32us>:

typedef unsigned short v32us __attribute__((vector_size(32)));

void add32us(v32us x, v32us y, v32us * z)
{
  35:	f3 0f 1e fa          	endbr64 
  39:	55                   	push   rbp
  3a:	48 89 e5             	mov    rbp,rsp
  3d:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
  41:	c5 fd 7f 44 24 e0    	vmovdqa YMMWORD PTR [rsp-0x20],ymm0
  47:	c5 fd 7f 4c 24 c0    	vmovdqa YMMWORD PTR [rsp-0x40],ymm1
  4d:	48 89 7c 24 b8       	mov    QWORD PTR [rsp-0x48],rdi
    *z = x + y;
  52:	c5 fd 6f 44 24 e0    	vmovdqa ymm0,YMMWORD PTR [rsp-0x20]
  58:	c5 fd fd 44 24 c0    	vpaddw ymm0,ymm0,YMMWORD PTR [rsp-0x40]
  5e:	48 8b 44 24 b8       	mov    rax,QWORD PTR [rsp-0x48]
  63:	c5 fd 7f 00          	vmovdqa YMMWORD PTR [rax],ymm0
}
  67:	90                   	nop
  68:	c9                   	leave  
  69:	c3                   	ret    

000000000000006a <add32ui>:

typedef unsigned int v32ui __attribute__((vector_size(32)));

void add32ui(v32ui x, v32ui y, v32ui * z)
{
  6a:	f3 0f 1e fa          	endbr64 
  6e:	55                   	push   rbp
  6f:	48 89 e5             	mov    rbp,rsp
  72:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
  76:	c5 fd 7f 44 24 e0    	vmovdqa YMMWORD PTR [rsp-0x20],ymm0
  7c:	c5 fd 7f 4c 24 c0    	vmovdqa YMMWORD PTR [rsp-0x40],ymm1
  82:	48 89 7c 24 b8       	mov    QWORD PTR [rsp-0x48],rdi
    *z = x + y;
  87:	c5 fd 6f 44 24 e0    	vmovdqa ymm0,YMMWORD PTR [rsp-0x20]
  8d:	c5 fd fe 44 24 c0    	vpaddd ymm0,ymm0,YMMWORD PTR [rsp-0x40]
  93:	48 8b 44 24 b8       	mov    rax,QWORD PTR [rsp-0x48]
  98:	c5 fd 7f 00          	vmovdqa YMMWORD PTR [rax],ymm0
}
  9c:	90                   	nop
  9d:	c9                   	leave  
  9e:	c3                   	ret    

000000000000009f <add32ul>:

typedef unsigned long int v32ul __attribute__((vector_size(32)));

void add32ul(v32ul x, v32ul y, v32ul * z)
{
  9f:	f3 0f 1e fa          	endbr64 
  a3:	55                   	push   rbp
  a4:	48 89 e5             	mov    rbp,rsp
  a7:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
  ab:	c5 fd 7f 44 24 e0    	vmovdqa YMMWORD PTR [rsp-0x20],ymm0
  b1:	c5 fd 7f 4c 24 c0    	vmovdqa YMMWORD PTR [rsp-0x40],ymm1
  b7:	48 89 7c 24 b8       	mov    QWORD PTR [rsp-0x48],rdi
    *z = x + y;
  bc:	c5 fd 6f 44 24 e0    	vmovdqa ymm0,YMMWORD PTR [rsp-0x20]
  c2:	c5 fd d4 44 24 c0    	vpaddq ymm0,ymm0,YMMWORD PTR [rsp-0x40]
  c8:	48 8b 44 24 b8       	mov    rax,QWORD PTR [rsp-0x48]
  cd:	c5 fd 7f 00          	vmovdqa YMMWORD PTR [rax],ymm0
}
  d1:	90                   	nop
  d2:	c9                   	leave  
  d3:	c3                   	ret    

00000000000000d4 <main>:

int main(void)
{
  d4:	f3 0f 1e fa          	endbr64 
  d8:	4c 8d 54 24 08       	lea    r10,[rsp+0x8]
  dd:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
  e1:	41 ff 72 f8          	push   QWORD PTR [r10-0x8]
  e5:	55                   	push   rbp
  e6:	48 89 e5             	mov    rbp,rsp
  e9:	41 52                	push   r10
  eb:	48 81 ec 68 01 00 00 	sub    rsp,0x168
  f2:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  f9:	00 00 
  fb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  ff:	31 c0                	xor    eax,eax
    {
        v32ub x =
 101:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 109 <main+0x35>
 108:	00 
 109:	c5 fd 7f 85 d0 fe ff 	vmovdqa YMMWORD PTR [rbp-0x130],ymm0
 110:	ff 
            { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
          18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
        v32ub y =
 111:	c5 fd 76 c0          	vpcmpeqd ymm0,ymm0,ymm0
 115:	c5 fd 7f 85 f0 fe ff 	vmovdqa YMMWORD PTR [rbp-0x110],ymm0
 11c:	ff 
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};
        v32ub z;

        add32ub(x, y, &z);
 11d:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 124:	c5 fd 6f 8d f0 fe ff 	vmovdqa ymm1,YMMWORD PTR [rbp-0x110]
 12b:	ff 
 12c:	c5 fd 6f 85 d0 fe ff 	vmovdqa ymm0,YMMWORD PTR [rbp-0x130]
 133:	ff 
 134:	48 89 c7             	mov    rdi,rax
 137:	e8 00 00 00 00       	call   13c <main+0x68>

        int i;

        puts("vector of unsigned chars");
 13c:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 143 <main+0x6f>
 143:	e8 00 00 00 00       	call   148 <main+0x74>

        for (i = 0; i < sizeof(v32ub) / sizeof(unsigned char); i++) {
 148:	c7 85 a0 fe ff ff 00 	mov    DWORD PTR [rbp-0x160],0x0
 14f:	00 00 00 
 152:	eb 33                	jmp    187 <main+0xb3>
            printf("%d %u\n", i, z[i]);
 154:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
 15a:	48 98                	cdqe   
 15c:	0f b6 84 05 b0 fe ff 	movzx  eax,BYTE PTR [rbp+rax*1-0x150]
 163:	ff 
 164:	0f b6 d0             	movzx  edx,al
 167:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
 16d:	89 c6                	mov    esi,eax
 16f:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 176 <main+0xa2>
 176:	b8 00 00 00 00       	mov    eax,0x0
 17b:	e8 00 00 00 00       	call   180 <main+0xac>
        for (i = 0; i < sizeof(v32ub) / sizeof(unsigned char); i++) {
 180:	83 85 a0 fe ff ff 01 	add    DWORD PTR [rbp-0x160],0x1
 187:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
 18d:	83 f8 1f             	cmp    eax,0x1f
 190:	76 c2                	jbe    154 <main+0x80>
        }
    }

    putchar('\n');
 192:	bf 0a 00 00 00       	mov    edi,0xa
 197:	e8 00 00 00 00       	call   19c <main+0xc8>

    {
        v32us x = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
 19c:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 1a4 <main+0xd0>
 1a3:	00 
 1a4:	c5 fd 7f 85 10 ff ff 	vmovdqa YMMWORD PTR [rbp-0xf0],ymm0
 1ab:	ff 
        v32us y =
 1ac:	c5 fd 76 c0          	vpcmpeqd ymm0,ymm0,ymm0
 1b0:	c5 fd 7f 85 30 ff ff 	vmovdqa YMMWORD PTR [rbp-0xd0],ymm0
 1b7:	ff 
            { 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
          0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
          0xffff };
        v32us z;

        add32us(x, y, &z);
 1b8:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 1bf:	c5 fd 6f 8d 30 ff ff 	vmovdqa ymm1,YMMWORD PTR [rbp-0xd0]
 1c6:	ff 
 1c7:	c5 fd 6f 85 10 ff ff 	vmovdqa ymm0,YMMWORD PTR [rbp-0xf0]
 1ce:	ff 
 1cf:	48 89 c7             	mov    rdi,rax
 1d2:	e8 00 00 00 00       	call   1d7 <main+0x103>

        int i;

        puts("vector of unsigned short ints");
 1d7:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1de <main+0x10a>
 1de:	e8 00 00 00 00       	call   1e3 <main+0x10f>

        for (i = 0; i < sizeof(v32us) / sizeof(unsigned short); i++) {
 1e3:	c7 85 a4 fe ff ff 00 	mov    DWORD PTR [rbp-0x15c],0x0
 1ea:	00 00 00 
 1ed:	eb 33                	jmp    222 <main+0x14e>
            printf("%d %u\n", i, z[i]);
 1ef:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
 1f5:	48 98                	cdqe   
 1f7:	0f b7 84 45 b0 fe ff 	movzx  eax,WORD PTR [rbp+rax*2-0x150]
 1fe:	ff 
 1ff:	0f b7 d0             	movzx  edx,ax
 202:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
 208:	89 c6                	mov    esi,eax
 20a:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 211 <main+0x13d>
 211:	b8 00 00 00 00       	mov    eax,0x0
 216:	e8 00 00 00 00       	call   21b <main+0x147>
        for (i = 0; i < sizeof(v32us) / sizeof(unsigned short); i++) {
 21b:	83 85 a4 fe ff ff 01 	add    DWORD PTR [rbp-0x15c],0x1
 222:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
 228:	83 f8 0f             	cmp    eax,0xf
 22b:	76 c2                	jbe    1ef <main+0x11b>
        }
    }

    putchar('\n');
 22d:	bf 0a 00 00 00       	mov    edi,0xa
 232:	e8 00 00 00 00       	call   237 <main+0x163>

    {
        v32ui x = { 0, 1, 2, 3, 4, 5, 6, 7 };
 237:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 23f <main+0x16b>
 23e:	00 
 23f:	c5 fd 7f 85 50 ff ff 	vmovdqa YMMWORD PTR [rbp-0xb0],ymm0
 246:	ff 
        v32ui y =
 247:	c5 fd 76 c0          	vpcmpeqd ymm0,ymm0,ymm0
 24b:	c5 fd 7f 85 70 ff ff 	vmovdqa YMMWORD PTR [rbp-0x90],ymm0
 252:	ff 
            { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
          0xffffffff, 0xffffffff, 0xffffffff };
        v32ui z;

        add32ui(x, y, &z);
 253:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 25a:	c5 fd 6f 8d 70 ff ff 	vmovdqa ymm1,YMMWORD PTR [rbp-0x90]
 261:	ff 
 262:	c5 fd 6f 85 50 ff ff 	vmovdqa ymm0,YMMWORD PTR [rbp-0xb0]
 269:	ff 
 26a:	48 89 c7             	mov    rdi,rax
 26d:	e8 00 00 00 00       	call   272 <main+0x19e>

        int i;

        puts("vector of unsigned ints");
 272:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 279 <main+0x1a5>
 279:	e8 00 00 00 00       	call   27e <main+0x1aa>

        for (i = 0; i < sizeof(v32ui) / sizeof(unsigned int); i++) {
 27e:	c7 85 a8 fe ff ff 00 	mov    DWORD PTR [rbp-0x158],0x0
 285:	00 00 00 
 288:	eb 2f                	jmp    2b9 <main+0x1e5>
            printf("%d %u\n", i, z[i]);
 28a:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
 290:	48 98                	cdqe   
 292:	8b 94 85 b0 fe ff ff 	mov    edx,DWORD PTR [rbp+rax*4-0x150]
 299:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
 29f:	89 c6                	mov    esi,eax
 2a1:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2a8 <main+0x1d4>
 2a8:	b8 00 00 00 00       	mov    eax,0x0
 2ad:	e8 00 00 00 00       	call   2b2 <main+0x1de>
        for (i = 0; i < sizeof(v32ui) / sizeof(unsigned int); i++) {
 2b2:	83 85 a8 fe ff ff 01 	add    DWORD PTR [rbp-0x158],0x1
 2b9:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
 2bf:	83 f8 07             	cmp    eax,0x7
 2c2:	76 c6                	jbe    28a <main+0x1b6>
        }
    }

    putchar('\n');
 2c4:	bf 0a 00 00 00       	mov    edi,0xa
 2c9:	e8 00 00 00 00       	call   2ce <main+0x1fa>

    {
        v32ul x = { 0, 1, 2, 3 };
 2ce:	c5 fd 6f 05 00 00 00 	vmovdqa ymm0,YMMWORD PTR [rip+0x0]        # 2d6 <main+0x202>
 2d5:	00 
 2d6:	c5 fd 7f 45 90       	vmovdqa YMMWORD PTR [rbp-0x70],ymm0
        v32ul y =
 2db:	c5 fd 76 c0          	vpcmpeqd ymm0,ymm0,ymm0
 2df:	c5 fd 7f 45 b0       	vmovdqa YMMWORD PTR [rbp-0x50],ymm0
            { 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
          0xffffffffffffffff };
        v32ul z;

        add32ul(x, y, &z);
 2e4:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 2eb:	c5 fd 6f 4d b0       	vmovdqa ymm1,YMMWORD PTR [rbp-0x50]
 2f0:	c5 fd 6f 45 90       	vmovdqa ymm0,YMMWORD PTR [rbp-0x70]
 2f5:	48 89 c7             	mov    rdi,rax
 2f8:	e8 00 00 00 00       	call   2fd <main+0x229>

        int i;

        puts("vector of unsigned longs");
 2fd:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 304 <main+0x230>
 304:	e8 00 00 00 00       	call   309 <main+0x235>

        for (i = 0; i < sizeof(v32ul) / sizeof(unsigned long); i++) {
 309:	c7 85 ac fe ff ff 00 	mov    DWORD PTR [rbp-0x154],0x0
 310:	00 00 00 
 313:	eb 30                	jmp    345 <main+0x271>
            printf("%d %lu\n", i, z[i]);
 315:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
 31b:	48 98                	cdqe   
 31d:	48 8b 94 c5 b0 fe ff 	mov    rdx,QWORD PTR [rbp+rax*8-0x150]
 324:	ff 
 325:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
 32b:	89 c6                	mov    esi,eax
 32d:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 334 <main+0x260>
 334:	b8 00 00 00 00       	mov    eax,0x0
 339:	e8 00 00 00 00       	call   33e <main+0x26a>
        for (i = 0; i < sizeof(v32ul) / sizeof(unsigned long); i++) {
 33e:	83 85 ac fe ff ff 01 	add    DWORD PTR [rbp-0x154],0x1
 345:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
 34b:	83 f8 03             	cmp    eax,0x3
 34e:	76 c5                	jbe    315 <main+0x241>
        }
    }

    return 0;
 350:	b8 00 00 00 00       	mov    eax,0x0
}
 355:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
 359:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
 360:	00 00 
 362:	74 05                	je     369 <main+0x295>
 364:	e8 00 00 00 00       	call   369 <main+0x295>
 369:	48 81 c4 68 01 00 00 	add    rsp,0x168
 370:	41 5a                	pop    r10
 372:	5d                   	pop    rbp
 373:	49 8d 62 f8          	lea    rsp,[r10-0x8]
 377:	c3                   	ret    
