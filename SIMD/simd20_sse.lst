
simd20_sse.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <add32sb>:
#include <stdio.h>

typedef signed char v32sb __attribute__((vector_size(32)));

void add32sb(v32sb x, v32sb y, v32sb * z)
{
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
   5:	48 89 e5             	mov    rbp,rsp
   8:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    *z = x + y;
   c:	66 0f 6f 4d 10       	movdqa xmm1,XMMWORD PTR [rbp+0x10]
  11:	66 0f 6f 45 30       	movdqa xmm0,XMMWORD PTR [rbp+0x30]
  16:	66 0f fc c8          	paddb  xmm1,xmm0
  1a:	66 0f 6f 55 20       	movdqa xmm2,XMMWORD PTR [rbp+0x20]
  1f:	66 0f 6f 45 40       	movdqa xmm0,XMMWORD PTR [rbp+0x40]
  24:	66 0f fc c2          	paddb  xmm0,xmm2
  28:	0f 29 4d a0          	movaps XMMWORD PTR [rbp-0x60],xmm1
  2c:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
  30:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  34:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  38:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  3c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  40:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  44:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  48:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  4c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  50:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  54:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  58:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  5c:	48 89 01             	mov    QWORD PTR [rcx],rax
  5f:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
  63:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  67:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  6b:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  6f:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
}
  73:	90                   	nop
  74:	5d                   	pop    rbp
  75:	c3                   	ret    

0000000000000076 <add32ss>:

typedef signed short v32ss __attribute__((vector_size(32)));

void add32ss(v32ss x, v32ss y, v32ss * z)
{
  76:	f3 0f 1e fa          	endbr64 
  7a:	55                   	push   rbp
  7b:	48 89 e5             	mov    rbp,rsp
  7e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    *z = x + y;
  82:	66 0f 6f 4d 10       	movdqa xmm1,XMMWORD PTR [rbp+0x10]
  87:	66 0f 6f 45 30       	movdqa xmm0,XMMWORD PTR [rbp+0x30]
  8c:	66 0f fd c8          	paddw  xmm1,xmm0
  90:	66 0f 6f 55 20       	movdqa xmm2,XMMWORD PTR [rbp+0x20]
  95:	66 0f 6f 45 40       	movdqa xmm0,XMMWORD PTR [rbp+0x40]
  9a:	66 0f fd c2          	paddw  xmm0,xmm2
  9e:	0f 29 4d a0          	movaps XMMWORD PTR [rbp-0x60],xmm1
  a2:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
  a6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  aa:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  ae:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  b2:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  b6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  ba:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  be:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  c2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  c6:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  ca:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  ce:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  d2:	48 89 01             	mov    QWORD PTR [rcx],rax
  d5:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
  d9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  dd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  e1:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
  e5:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
}
  e9:	90                   	nop
  ea:	5d                   	pop    rbp
  eb:	c3                   	ret    

00000000000000ec <add32si>:

typedef signed int v32si __attribute__((vector_size(32)));

void add32si(v32si x, v32si y, v32si * z)
{
  ec:	f3 0f 1e fa          	endbr64 
  f0:	55                   	push   rbp
  f1:	48 89 e5             	mov    rbp,rsp
  f4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    *z = x + y;
  f8:	66 0f 6f 4d 10       	movdqa xmm1,XMMWORD PTR [rbp+0x10]
  fd:	66 0f 6f 45 30       	movdqa xmm0,XMMWORD PTR [rbp+0x30]
 102:	66 0f fe c8          	paddd  xmm1,xmm0
 106:	66 0f 6f 55 20       	movdqa xmm2,XMMWORD PTR [rbp+0x20]
 10b:	66 0f 6f 45 40       	movdqa xmm0,XMMWORD PTR [rbp+0x40]
 110:	66 0f fe c2          	paddd  xmm0,xmm2
 114:	0f 29 4d a0          	movaps XMMWORD PTR [rbp-0x60],xmm1
 118:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
 11c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
 120:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
 124:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
 128:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
 12c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
 130:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
 134:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
 138:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
 13c:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
 140:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
 144:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
 148:	48 89 01             	mov    QWORD PTR [rcx],rax
 14b:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
 14f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
 153:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
 157:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
 15b:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
}
 15f:	90                   	nop
 160:	5d                   	pop    rbp
 161:	c3                   	ret    

0000000000000162 <add32sl>:

typedef signed long int v32sl __attribute__((vector_size(32)));

void add32sl(v32sl x, v32sl y, v32sl * z)
{
 162:	f3 0f 1e fa          	endbr64 
 166:	55                   	push   rbp
 167:	48 89 e5             	mov    rbp,rsp
 16a:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    *z = x + y;
 16e:	66 0f 6f 4d 10       	movdqa xmm1,XMMWORD PTR [rbp+0x10]
 173:	66 0f 6f 45 30       	movdqa xmm0,XMMWORD PTR [rbp+0x30]
 178:	66 0f d4 c8          	paddq  xmm1,xmm0
 17c:	66 0f 6f 55 20       	movdqa xmm2,XMMWORD PTR [rbp+0x20]
 181:	66 0f 6f 45 40       	movdqa xmm0,XMMWORD PTR [rbp+0x40]
 186:	66 0f d4 c2          	paddq  xmm0,xmm2
 18a:	0f 29 4d a0          	movaps XMMWORD PTR [rbp-0x60],xmm1
 18e:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
 192:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
 196:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
 19a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
 19e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
 1a2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
 1a6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
 1aa:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
 1ae:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
 1b2:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
 1b6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
 1ba:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
 1be:	48 89 01             	mov    QWORD PTR [rcx],rax
 1c1:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
 1c5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
 1c9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
 1cd:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
 1d1:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
}
 1d5:	90                   	nop
 1d6:	5d                   	pop    rbp
 1d7:	c3                   	ret    

00000000000001d8 <main>:

int main(void)
{
 1d8:	f3 0f 1e fa          	endbr64 
 1dc:	4c 8d 54 24 08       	lea    r10,[rsp+0x8]
 1e1:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
 1e5:	41 ff 72 f8          	push   QWORD PTR [r10-0x8]
 1e9:	55                   	push   rbp
 1ea:	48 89 e5             	mov    rbp,rsp
 1ed:	41 52                	push   r10
 1ef:	48 81 ec 68 01 00 00 	sub    rsp,0x168
 1f6:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 1fd:	00 00 
 1ff:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
 203:	31 c0                	xor    eax,eax
    {
        v32sb x =
 205:	c6 85 d0 fe ff ff 00 	mov    BYTE PTR [rbp-0x130],0x0
 20c:	c6 85 d1 fe ff ff 01 	mov    BYTE PTR [rbp-0x12f],0x1
 213:	c6 85 d2 fe ff ff 02 	mov    BYTE PTR [rbp-0x12e],0x2
 21a:	c6 85 d3 fe ff ff 03 	mov    BYTE PTR [rbp-0x12d],0x3
 221:	c6 85 d4 fe ff ff 04 	mov    BYTE PTR [rbp-0x12c],0x4
 228:	c6 85 d5 fe ff ff 05 	mov    BYTE PTR [rbp-0x12b],0x5
 22f:	c6 85 d6 fe ff ff 06 	mov    BYTE PTR [rbp-0x12a],0x6
 236:	c6 85 d7 fe ff ff 07 	mov    BYTE PTR [rbp-0x129],0x7
 23d:	c6 85 d8 fe ff ff 08 	mov    BYTE PTR [rbp-0x128],0x8
 244:	c6 85 d9 fe ff ff 09 	mov    BYTE PTR [rbp-0x127],0x9
 24b:	c6 85 da fe ff ff 0a 	mov    BYTE PTR [rbp-0x126],0xa
 252:	c6 85 db fe ff ff 0b 	mov    BYTE PTR [rbp-0x125],0xb
 259:	c6 85 dc fe ff ff 0c 	mov    BYTE PTR [rbp-0x124],0xc
 260:	c6 85 dd fe ff ff 0d 	mov    BYTE PTR [rbp-0x123],0xd
 267:	c6 85 de fe ff ff 0e 	mov    BYTE PTR [rbp-0x122],0xe
 26e:	c6 85 df fe ff ff 0f 	mov    BYTE PTR [rbp-0x121],0xf
 275:	c6 85 e0 fe ff ff 10 	mov    BYTE PTR [rbp-0x120],0x10
 27c:	c6 85 e1 fe ff ff 11 	mov    BYTE PTR [rbp-0x11f],0x11
 283:	c6 85 e2 fe ff ff 12 	mov    BYTE PTR [rbp-0x11e],0x12
 28a:	c6 85 e3 fe ff ff 13 	mov    BYTE PTR [rbp-0x11d],0x13
 291:	c6 85 e4 fe ff ff 14 	mov    BYTE PTR [rbp-0x11c],0x14
 298:	c6 85 e5 fe ff ff 15 	mov    BYTE PTR [rbp-0x11b],0x15
 29f:	c6 85 e6 fe ff ff 16 	mov    BYTE PTR [rbp-0x11a],0x16
 2a6:	c6 85 e7 fe ff ff 17 	mov    BYTE PTR [rbp-0x119],0x17
 2ad:	c6 85 e8 fe ff ff 18 	mov    BYTE PTR [rbp-0x118],0x18
 2b4:	c6 85 e9 fe ff ff 19 	mov    BYTE PTR [rbp-0x117],0x19
 2bb:	c6 85 ea fe ff ff 1a 	mov    BYTE PTR [rbp-0x116],0x1a
 2c2:	c6 85 eb fe ff ff 1b 	mov    BYTE PTR [rbp-0x115],0x1b
 2c9:	c6 85 ec fe ff ff 1c 	mov    BYTE PTR [rbp-0x114],0x1c
 2d0:	c6 85 ed fe ff ff 1d 	mov    BYTE PTR [rbp-0x113],0x1d
 2d7:	c6 85 ee fe ff ff 1e 	mov    BYTE PTR [rbp-0x112],0x1e
 2de:	c6 85 ef fe ff ff 1f 	mov    BYTE PTR [rbp-0x111],0x1f
            { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
          18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
        v32sb y =
 2e5:	c6 85 f0 fe ff ff ff 	mov    BYTE PTR [rbp-0x110],0xff
 2ec:	c6 85 f1 fe ff ff ff 	mov    BYTE PTR [rbp-0x10f],0xff
 2f3:	c6 85 f2 fe ff ff ff 	mov    BYTE PTR [rbp-0x10e],0xff
 2fa:	c6 85 f3 fe ff ff ff 	mov    BYTE PTR [rbp-0x10d],0xff
 301:	c6 85 f4 fe ff ff ff 	mov    BYTE PTR [rbp-0x10c],0xff
 308:	c6 85 f5 fe ff ff ff 	mov    BYTE PTR [rbp-0x10b],0xff
 30f:	c6 85 f6 fe ff ff ff 	mov    BYTE PTR [rbp-0x10a],0xff
 316:	c6 85 f7 fe ff ff ff 	mov    BYTE PTR [rbp-0x109],0xff
 31d:	c6 85 f8 fe ff ff ff 	mov    BYTE PTR [rbp-0x108],0xff
 324:	c6 85 f9 fe ff ff ff 	mov    BYTE PTR [rbp-0x107],0xff
 32b:	c6 85 fa fe ff ff ff 	mov    BYTE PTR [rbp-0x106],0xff
 332:	c6 85 fb fe ff ff ff 	mov    BYTE PTR [rbp-0x105],0xff
 339:	c6 85 fc fe ff ff ff 	mov    BYTE PTR [rbp-0x104],0xff
 340:	c6 85 fd fe ff ff ff 	mov    BYTE PTR [rbp-0x103],0xff
 347:	c6 85 fe fe ff ff ff 	mov    BYTE PTR [rbp-0x102],0xff
 34e:	c6 85 ff fe ff ff ff 	mov    BYTE PTR [rbp-0x101],0xff
 355:	c6 85 00 ff ff ff ff 	mov    BYTE PTR [rbp-0x100],0xff
 35c:	c6 85 01 ff ff ff ff 	mov    BYTE PTR [rbp-0xff],0xff
 363:	c6 85 02 ff ff ff ff 	mov    BYTE PTR [rbp-0xfe],0xff
 36a:	c6 85 03 ff ff ff ff 	mov    BYTE PTR [rbp-0xfd],0xff
 371:	c6 85 04 ff ff ff ff 	mov    BYTE PTR [rbp-0xfc],0xff
 378:	c6 85 05 ff ff ff ff 	mov    BYTE PTR [rbp-0xfb],0xff
 37f:	c6 85 06 ff ff ff ff 	mov    BYTE PTR [rbp-0xfa],0xff
 386:	c6 85 07 ff ff ff ff 	mov    BYTE PTR [rbp-0xf9],0xff
 38d:	c6 85 08 ff ff ff ff 	mov    BYTE PTR [rbp-0xf8],0xff
 394:	c6 85 09 ff ff ff ff 	mov    BYTE PTR [rbp-0xf7],0xff
 39b:	c6 85 0a ff ff ff ff 	mov    BYTE PTR [rbp-0xf6],0xff
 3a2:	c6 85 0b ff ff ff ff 	mov    BYTE PTR [rbp-0xf5],0xff
 3a9:	c6 85 0c ff ff ff ff 	mov    BYTE PTR [rbp-0xf4],0xff
 3b0:	c6 85 0d ff ff ff ff 	mov    BYTE PTR [rbp-0xf3],0xff
 3b7:	c6 85 0e ff ff ff ff 	mov    BYTE PTR [rbp-0xf2],0xff
 3be:	c6 85 0f ff ff ff ff 	mov    BYTE PTR [rbp-0xf1],0xff
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};
        v32sb z;

        add32sb(x, y, &z);
 3c5:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 3cc:	ff b5 08 ff ff ff    	push   QWORD PTR [rbp-0xf8]
 3d2:	ff b5 00 ff ff ff    	push   QWORD PTR [rbp-0x100]
 3d8:	ff b5 f8 fe ff ff    	push   QWORD PTR [rbp-0x108]
 3de:	ff b5 f0 fe ff ff    	push   QWORD PTR [rbp-0x110]
 3e4:	ff b5 e8 fe ff ff    	push   QWORD PTR [rbp-0x118]
 3ea:	ff b5 e0 fe ff ff    	push   QWORD PTR [rbp-0x120]
 3f0:	ff b5 d8 fe ff ff    	push   QWORD PTR [rbp-0x128]
 3f6:	ff b5 d0 fe ff ff    	push   QWORD PTR [rbp-0x130]
 3fc:	48 89 c7             	mov    rdi,rax
 3ff:	e8 00 00 00 00       	call   404 <main+0x22c>
 404:	48 83 c4 40          	add    rsp,0x40

        int i;

        puts("vector of signed chars");
 408:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 40f <main+0x237>
 40f:	e8 00 00 00 00       	call   414 <main+0x23c>

        for (i = 0; i < sizeof(v32sb) / sizeof(signed char); i++) {
 414:	c7 85 a0 fe ff ff 00 	mov    DWORD PTR [rbp-0x160],0x0
 41b:	00 00 00 
 41e:	eb 33                	jmp    453 <main+0x27b>
            printf("%d %d\n", i, z[i]);
 420:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
 426:	48 98                	cdqe   
 428:	0f b6 84 05 b0 fe ff 	movzx  eax,BYTE PTR [rbp+rax*1-0x150]
 42f:	ff 
 430:	0f be d0             	movsx  edx,al
 433:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
 439:	89 c6                	mov    esi,eax
 43b:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 442 <main+0x26a>
 442:	b8 00 00 00 00       	mov    eax,0x0
 447:	e8 00 00 00 00       	call   44c <main+0x274>
        for (i = 0; i < sizeof(v32sb) / sizeof(signed char); i++) {
 44c:	83 85 a0 fe ff ff 01 	add    DWORD PTR [rbp-0x160],0x1
 453:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
 459:	83 f8 1f             	cmp    eax,0x1f
 45c:	76 c2                	jbe    420 <main+0x248>
        }
    }

    putchar('\n');
 45e:	bf 0a 00 00 00       	mov    edi,0xa
 463:	e8 00 00 00 00       	call   468 <main+0x290>

    {
        v32ss x = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
 468:	66 c7 85 10 ff ff ff 	mov    WORD PTR [rbp-0xf0],0x0
 46f:	00 00 
 471:	66 c7 85 12 ff ff ff 	mov    WORD PTR [rbp-0xee],0x1
 478:	01 00 
 47a:	66 c7 85 14 ff ff ff 	mov    WORD PTR [rbp-0xec],0x2
 481:	02 00 
 483:	66 c7 85 16 ff ff ff 	mov    WORD PTR [rbp-0xea],0x3
 48a:	03 00 
 48c:	66 c7 85 18 ff ff ff 	mov    WORD PTR [rbp-0xe8],0x4
 493:	04 00 
 495:	66 c7 85 1a ff ff ff 	mov    WORD PTR [rbp-0xe6],0x5
 49c:	05 00 
 49e:	66 c7 85 1c ff ff ff 	mov    WORD PTR [rbp-0xe4],0x6
 4a5:	06 00 
 4a7:	66 c7 85 1e ff ff ff 	mov    WORD PTR [rbp-0xe2],0x7
 4ae:	07 00 
 4b0:	66 c7 85 20 ff ff ff 	mov    WORD PTR [rbp-0xe0],0x8
 4b7:	08 00 
 4b9:	66 c7 85 22 ff ff ff 	mov    WORD PTR [rbp-0xde],0x9
 4c0:	09 00 
 4c2:	66 c7 85 24 ff ff ff 	mov    WORD PTR [rbp-0xdc],0xa
 4c9:	0a 00 
 4cb:	66 c7 85 26 ff ff ff 	mov    WORD PTR [rbp-0xda],0xb
 4d2:	0b 00 
 4d4:	66 c7 85 28 ff ff ff 	mov    WORD PTR [rbp-0xd8],0xc
 4db:	0c 00 
 4dd:	66 c7 85 2a ff ff ff 	mov    WORD PTR [rbp-0xd6],0xd
 4e4:	0d 00 
 4e6:	66 c7 85 2c ff ff ff 	mov    WORD PTR [rbp-0xd4],0xe
 4ed:	0e 00 
 4ef:	66 c7 85 2e ff ff ff 	mov    WORD PTR [rbp-0xd2],0xf
 4f6:	0f 00 
        v32ss y =
 4f8:	66 c7 85 30 ff ff ff 	mov    WORD PTR [rbp-0xd0],0xffff
 4ff:	ff ff 
 501:	66 c7 85 32 ff ff ff 	mov    WORD PTR [rbp-0xce],0xffff
 508:	ff ff 
 50a:	66 c7 85 34 ff ff ff 	mov    WORD PTR [rbp-0xcc],0xffff
 511:	ff ff 
 513:	66 c7 85 36 ff ff ff 	mov    WORD PTR [rbp-0xca],0xffff
 51a:	ff ff 
 51c:	66 c7 85 38 ff ff ff 	mov    WORD PTR [rbp-0xc8],0xffff
 523:	ff ff 
 525:	66 c7 85 3a ff ff ff 	mov    WORD PTR [rbp-0xc6],0xffff
 52c:	ff ff 
 52e:	66 c7 85 3c ff ff ff 	mov    WORD PTR [rbp-0xc4],0xffff
 535:	ff ff 
 537:	66 c7 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],0xffff
 53e:	ff ff 
 540:	66 c7 85 40 ff ff ff 	mov    WORD PTR [rbp-0xc0],0xffff
 547:	ff ff 
 549:	66 c7 85 42 ff ff ff 	mov    WORD PTR [rbp-0xbe],0xffff
 550:	ff ff 
 552:	66 c7 85 44 ff ff ff 	mov    WORD PTR [rbp-0xbc],0xffff
 559:	ff ff 
 55b:	66 c7 85 46 ff ff ff 	mov    WORD PTR [rbp-0xba],0xffff
 562:	ff ff 
 564:	66 c7 85 48 ff ff ff 	mov    WORD PTR [rbp-0xb8],0xffff
 56b:	ff ff 
 56d:	66 c7 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],0xffff
 574:	ff ff 
 576:	66 c7 85 4c ff ff ff 	mov    WORD PTR [rbp-0xb4],0xffff
 57d:	ff ff 
 57f:	66 c7 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],0xffff
 586:	ff ff 
            { 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
          0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
          0xffff };
        v32ss z;

        add32ss(x, y, &z);
 588:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 58f:	ff b5 48 ff ff ff    	push   QWORD PTR [rbp-0xb8]
 595:	ff b5 40 ff ff ff    	push   QWORD PTR [rbp-0xc0]
 59b:	ff b5 38 ff ff ff    	push   QWORD PTR [rbp-0xc8]
 5a1:	ff b5 30 ff ff ff    	push   QWORD PTR [rbp-0xd0]
 5a7:	ff b5 28 ff ff ff    	push   QWORD PTR [rbp-0xd8]
 5ad:	ff b5 20 ff ff ff    	push   QWORD PTR [rbp-0xe0]
 5b3:	ff b5 18 ff ff ff    	push   QWORD PTR [rbp-0xe8]
 5b9:	ff b5 10 ff ff ff    	push   QWORD PTR [rbp-0xf0]
 5bf:	48 89 c7             	mov    rdi,rax
 5c2:	e8 00 00 00 00       	call   5c7 <main+0x3ef>
 5c7:	48 83 c4 40          	add    rsp,0x40

        int i;

        puts("vector of signed short ints");
 5cb:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 5d2 <main+0x3fa>
 5d2:	e8 00 00 00 00       	call   5d7 <main+0x3ff>

        for (i = 0; i < sizeof(v32ss) / sizeof(signed short); i++) {
 5d7:	c7 85 a4 fe ff ff 00 	mov    DWORD PTR [rbp-0x15c],0x0
 5de:	00 00 00 
 5e1:	eb 33                	jmp    616 <main+0x43e>
            printf("%d %d\n", i, z[i]);
 5e3:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
 5e9:	48 98                	cdqe   
 5eb:	0f b7 84 45 b0 fe ff 	movzx  eax,WORD PTR [rbp+rax*2-0x150]
 5f2:	ff 
 5f3:	0f bf d0             	movsx  edx,ax
 5f6:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
 5fc:	89 c6                	mov    esi,eax
 5fe:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 605 <main+0x42d>
 605:	b8 00 00 00 00       	mov    eax,0x0
 60a:	e8 00 00 00 00       	call   60f <main+0x437>
        for (i = 0; i < sizeof(v32ss) / sizeof(signed short); i++) {
 60f:	83 85 a4 fe ff ff 01 	add    DWORD PTR [rbp-0x15c],0x1
 616:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
 61c:	83 f8 0f             	cmp    eax,0xf
 61f:	76 c2                	jbe    5e3 <main+0x40b>
        }
    }

    putchar('\n');
 621:	bf 0a 00 00 00       	mov    edi,0xa
 626:	e8 00 00 00 00       	call   62b <main+0x453>

    {
        v32si x = { 0, 1, 2, 3, 4, 5, 6, 7 };
 62b:	c7 85 50 ff ff ff 00 	mov    DWORD PTR [rbp-0xb0],0x0
 632:	00 00 00 
 635:	c7 85 54 ff ff ff 01 	mov    DWORD PTR [rbp-0xac],0x1
 63c:	00 00 00 
 63f:	c7 85 58 ff ff ff 02 	mov    DWORD PTR [rbp-0xa8],0x2
 646:	00 00 00 
 649:	c7 85 5c ff ff ff 03 	mov    DWORD PTR [rbp-0xa4],0x3
 650:	00 00 00 
 653:	c7 85 60 ff ff ff 04 	mov    DWORD PTR [rbp-0xa0],0x4
 65a:	00 00 00 
 65d:	c7 85 64 ff ff ff 05 	mov    DWORD PTR [rbp-0x9c],0x5
 664:	00 00 00 
 667:	c7 85 68 ff ff ff 06 	mov    DWORD PTR [rbp-0x98],0x6
 66e:	00 00 00 
 671:	c7 85 6c ff ff ff 07 	mov    DWORD PTR [rbp-0x94],0x7
 678:	00 00 00 
        v32si y =
 67b:	c7 85 70 ff ff ff ff 	mov    DWORD PTR [rbp-0x90],0xffffffff
 682:	ff ff ff 
 685:	c7 85 74 ff ff ff ff 	mov    DWORD PTR [rbp-0x8c],0xffffffff
 68c:	ff ff ff 
 68f:	c7 85 78 ff ff ff ff 	mov    DWORD PTR [rbp-0x88],0xffffffff
 696:	ff ff ff 
 699:	c7 85 7c ff ff ff ff 	mov    DWORD PTR [rbp-0x84],0xffffffff
 6a0:	ff ff ff 
 6a3:	c7 45 80 ff ff ff ff 	mov    DWORD PTR [rbp-0x80],0xffffffff
 6aa:	c7 45 84 ff ff ff ff 	mov    DWORD PTR [rbp-0x7c],0xffffffff
 6b1:	c7 45 88 ff ff ff ff 	mov    DWORD PTR [rbp-0x78],0xffffffff
 6b8:	c7 45 8c ff ff ff ff 	mov    DWORD PTR [rbp-0x74],0xffffffff
            { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
          0xffffffff, 0xffffffff, 0xffffffff };
        v32si z;

        add32si(x, y, &z);
 6bf:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 6c6:	ff 75 88             	push   QWORD PTR [rbp-0x78]
 6c9:	ff 75 80             	push   QWORD PTR [rbp-0x80]
 6cc:	ff b5 78 ff ff ff    	push   QWORD PTR [rbp-0x88]
 6d2:	ff b5 70 ff ff ff    	push   QWORD PTR [rbp-0x90]
 6d8:	ff b5 68 ff ff ff    	push   QWORD PTR [rbp-0x98]
 6de:	ff b5 60 ff ff ff    	push   QWORD PTR [rbp-0xa0]
 6e4:	ff b5 58 ff ff ff    	push   QWORD PTR [rbp-0xa8]
 6ea:	ff b5 50 ff ff ff    	push   QWORD PTR [rbp-0xb0]
 6f0:	48 89 c7             	mov    rdi,rax
 6f3:	e8 00 00 00 00       	call   6f8 <main+0x520>
 6f8:	48 83 c4 40          	add    rsp,0x40

        int i;

        puts("vector of signed ints");
 6fc:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 703 <main+0x52b>
 703:	e8 00 00 00 00       	call   708 <main+0x530>

        for (i = 0; i < sizeof(v32si) / sizeof(signed int); i++) {
 708:	c7 85 a8 fe ff ff 00 	mov    DWORD PTR [rbp-0x158],0x0
 70f:	00 00 00 
 712:	eb 2f                	jmp    743 <main+0x56b>
            printf("%d %d\n", i, z[i]);
 714:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
 71a:	48 98                	cdqe   
 71c:	8b 94 85 b0 fe ff ff 	mov    edx,DWORD PTR [rbp+rax*4-0x150]
 723:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
 729:	89 c6                	mov    esi,eax
 72b:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 732 <main+0x55a>
 732:	b8 00 00 00 00       	mov    eax,0x0
 737:	e8 00 00 00 00       	call   73c <main+0x564>
        for (i = 0; i < sizeof(v32si) / sizeof(signed int); i++) {
 73c:	83 85 a8 fe ff ff 01 	add    DWORD PTR [rbp-0x158],0x1
 743:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
 749:	83 f8 07             	cmp    eax,0x7
 74c:	76 c6                	jbe    714 <main+0x53c>
        }
    }

    putchar('\n');
 74e:	bf 0a 00 00 00       	mov    edi,0xa
 753:	e8 00 00 00 00       	call   758 <main+0x580>

    {
        v32sl x = { 0, 1, 2, 3 };
 758:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
 75f:	00 
 760:	48 c7 45 98 01 00 00 	mov    QWORD PTR [rbp-0x68],0x1
 767:	00 
 768:	48 c7 45 a0 02 00 00 	mov    QWORD PTR [rbp-0x60],0x2
 76f:	00 
 770:	48 c7 45 a8 03 00 00 	mov    QWORD PTR [rbp-0x58],0x3
 777:	00 
        v32sl y =
 778:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
 77f:	ff ff 7f 
 782:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
 786:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
 78a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
 78e:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            { 0x7fffffffffffffff, 0x7fffffffffffffff, 0x7fffffffffffffff,
          0x7fffffffffffffff };
        v32sl z;

        add32sl(x, y, &z);
 792:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
 799:	ff 75 c8             	push   QWORD PTR [rbp-0x38]
 79c:	ff 75 c0             	push   QWORD PTR [rbp-0x40]
 79f:	ff 75 b8             	push   QWORD PTR [rbp-0x48]
 7a2:	ff 75 b0             	push   QWORD PTR [rbp-0x50]
 7a5:	ff 75 a8             	push   QWORD PTR [rbp-0x58]
 7a8:	ff 75 a0             	push   QWORD PTR [rbp-0x60]
 7ab:	ff 75 98             	push   QWORD PTR [rbp-0x68]
 7ae:	ff 75 90             	push   QWORD PTR [rbp-0x70]
 7b1:	48 89 c7             	mov    rdi,rax
 7b4:	e8 00 00 00 00       	call   7b9 <main+0x5e1>
 7b9:	48 83 c4 40          	add    rsp,0x40

        int i;

        puts("vector of signed longs");
 7bd:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 7c4 <main+0x5ec>
 7c4:	e8 00 00 00 00       	call   7c9 <main+0x5f1>

        for (i = 0; i < sizeof(v32sl) / sizeof(signed long); i++) {
 7c9:	c7 85 ac fe ff ff 00 	mov    DWORD PTR [rbp-0x154],0x0
 7d0:	00 00 00 
 7d3:	eb 30                	jmp    805 <main+0x62d>
            printf("%d %ld\n", i, z[i]);
 7d5:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
 7db:	48 98                	cdqe   
 7dd:	48 8b 94 c5 b0 fe ff 	mov    rdx,QWORD PTR [rbp+rax*8-0x150]
 7e4:	ff 
 7e5:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
 7eb:	89 c6                	mov    esi,eax
 7ed:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 7f4 <main+0x61c>
 7f4:	b8 00 00 00 00       	mov    eax,0x0
 7f9:	e8 00 00 00 00       	call   7fe <main+0x626>
        for (i = 0; i < sizeof(v32sl) / sizeof(signed long); i++) {
 7fe:	83 85 ac fe ff ff 01 	add    DWORD PTR [rbp-0x154],0x1
 805:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
 80b:	83 f8 03             	cmp    eax,0x3
 80e:	76 c5                	jbe    7d5 <main+0x5fd>
        }
    }

    return 0;
 810:	b8 00 00 00 00       	mov    eax,0x0
}
 815:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
 819:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
 820:	00 00 
 822:	74 05                	je     829 <main+0x651>
 824:	e8 00 00 00 00       	call   829 <main+0x651>
 829:	4c 8b 55 f8          	mov    r10,QWORD PTR [rbp-0x8]
 82d:	c9                   	leave  
 82e:	49 8d 62 f8          	lea    rsp,[r10-0x8]
 832:	c3                   	ret    
