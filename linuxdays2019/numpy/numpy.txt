                    Numpy
══════════════════════════════════════════════════
■ Autor    Pavel Tišnovský, Red Hat
■ Email    <ptisnovs 0x40 redhat 0x2e com>
■ Datum    2019-10-06

Obsah přednášky (1)
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Programovací jazyk Python
▶ Knihovna Numpy
▶ Skalární datové typy
▶ Datová struktura ndarray
▶ Tvar (shape) n-dimenzionálního pole
▶ Konstruktory datové struktury ndarray
    ◆ numpy.array
    ◆ numpy.zeros
    ◆ numpy.ones
    ◆ numpy.arange
    ◆ numpy.linspace

Obsah přednášky (2)
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Základní operace s n-dimenzionálními poli 
    ◆ přetypování prvků v poli
    ◆ zjištění tvaru pole
    ◆ změna tvaru pole
▶
▶
▶ Další podbalíčky, které nalezneme v knihovně ndarray
▶
▶ Odkazy na další informační zdroje

Programovací jazyk Python
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Dnes jeden z nejpopulárnějších programovacích jazyků
    ◆ viz například Tiobe index
    ◆ 
    ◆ 
▶ Dostupnost na většině platforem
    ◆ na některých MCU jako MicroPython
▶ Python 2 Python 3
    ◆ 

Programovací jazyk Python
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Typické použití Pythonu
    ◆ Nástroje a utility ovládané z příkazového řádku
    ◆ Aplikace s grafickým uživatelským rozhraním
    ◆ Client-server
        - serverová část (Flask, Django, CherryPy, ...)
        - klient (Brython, spíše technologické demo)
    ◆ Numerické výpočty, symbolické výpočty
        - Numpy
        - SciPy
        - Matplotlib
    ◆ Moderní způsoby využití Pythonu
        - AI
        - Machine Learning (Deep Learning)
          PyTorch
        - Big data
    ◆ Tzv. "glue" jazyk
    ◆ Vestavitelný interpret Pythonu

Knihovna Numpy
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ 
▶ 
▶ 

Skalární datové typy
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
https://docs.scipy.org/doc/numpy/user/basics.types.html
╔════════════╤═══════════════════════════╤═══════════════════════════════╗
║ Formát     │ Popis                     │ Rozsah                        ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ bool       │ uloženo po bajtech        │  True/False                   ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ int8       │ celočíselný se znaménkem  │ -128..127                     ║
║ int16      │ celočíselný se znaménkem  │ -32768..32767                 ║
║ int32      │ celočíselný se znaménkem  │ -2147483648..2147483647       ║
║ int64      │ celočíselný se znaménkem  │ -9223372036854775808..        ║
║            │                           │  9223372036854775807          ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ uint8      │ celočíselný bez znaménka  │  0..255                       ║
║ uint16     │ celočíselný bez znaménka  │  0..65535                     ║
║ uint32     │ celočíselný bez znaménka  │  0..4294967295                ║
║ uint64     │ celočíselný bez znaménka  │  0..18446744073709551615      ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ float16    │ plovoucí řádová čárka     │  poloviční přesnost (half)    ║
║ float32    │ plovoucí řádová čárka     │  jednoduchá přesnost (single) ║
║ float64    │ plovoucí řádová čárka     │  dvojitá přesnost (double)    ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ complex64  │ komplexní číslo (dvojice) │  2×float32                    ║
║ complex128 │ komplexní číslo (dvojice) │  2×float64                    ║
╚════════════╧═══════════════════════════╧═══════════════════════════════╝

Kódy skalárních datových typů
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
- jednoznakové kódy je možné použít namísto jména typu
╔════════════╤══════╗
║  Formát    │ Kód  ║
╟────────────┼──────╢
║ formát     │ kód  ║
║ bool       │ '?'  ║
║ int8       │ 'b'  ║
║ int16      │ 'h'  ║
║ int32      │ 'i'  ║
║ int64      │ 'l'  ║
║ uint8      │ 'B'  ║
║ uint16     │ 'H'  ║
║ uint32     │ 'I'  ║
║ uint64     │ 'L'  ║
║ float16    │ 'e'  ║
║ float32    │ 'f'  ║
║ float64    │ 'd'  ║
║ complex64  │ 'F'  ║
║ complex128 │ 'D'  ║
╚════════════╧══════╝

Datový typ single
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Celkový počet bitů (bytů):   32 (4)
Bitů pro znaménko:            1
Bitů pro exponent:            8
Bitů pro mantisu:            23

Datový typ double
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Celkový počet bitů (bytů):   64 (8)
Bitů pro znaménko:            1
Bitů pro exponent:           11
Bitů pro mantisu:            52

Datový typ float16
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Celkový počet bitů (bytů):   16 (2)
Bitů pro znaménko:            1
Bitů pro exponent:            5
Bitů pro mantisu:            10
BIAS (offset exponentu):     15
Přesnost:                    5-6 číslic
Maximální hodnota:           65504
Minimální hodnota:          -65504
Nejmenší kladná nenulová hodnota:      5,960×10⁻⁸
Nejmenší kladná normalizovaná hodnota: 6,104×10⁻⁵

Datová struktura ndarray
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Představuje obecné n-dimenzionální pole
▶ Interní způsob uložení dat zcela odlišný od Pythonovských seznamů či n-tic
▶ Homogenní datová struktura
    ◆ menší flexibilita
    ◆ menší paměťové nároky
    ◆ vyšší výpočetní rychlost díky použití nativního kódu
    ◆ obecně lepší využití cache a rychlejší přístup k prvkům

Datová struktura ndarray (pokračování)
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Základní strukturovaný datový typ knihovny Numpy
▶ Volitelný počet dimenzí
    ◆ vektory
    ◆ matice
    ◆ pole s větším počtem dimenzí
▶ Volitelný typ prvků
▶ Volitelné uspořádání prvků
    ◆ podle zvyklostí jazyka Fortran
    ◆ podle zvyklostí jazyka C

Tvar (shape) n-dimenzionálního pole
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Popisuje organizaci a uspořádání prvků v poli
    ◆ n-tice obsahující rozměry pole v jednotlivých dimenzích
▶ Příklady tvarů
    ◆ (10,) - vektor s deseti prvky
    ◆ (2, 3) - dvourozměrná matice se dvěma řádky a třemi sloupci
    ◆ (2, 3, 4) - trojrozměrné pole
▶ Tvar je možné zjistit
    ◆ atribut "shape"
    ◆ funkce numpy.shape
▶ Tvar je možné změnit
    ◆ funkce numpy.reshape

Konstrukce n-dimenzionálních polí
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Několik typů konstruktorů
    ◆ numpy.array
    ◆ numpy.zeros
    ◆ numpy.ones
▶ Konverzní funkce

Konstruktor numpy.array
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ parametry
array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0)

Order
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
╔═════════╤═══════════════════════════════════════════════════════════╗
║ Hodnota │ Význam                                                    ║
╟─────────┼───────────────────────────────────────────────────────────╢
║ 'C'     │ prvky jsou uspořádány jako v jazyku C                     ║
║ 'F'     │ prvky jsou uspořádány jako v jazyku Fortran               ║
║ 'A'     │ ponecháme na implementaci, který způsob uspořádání zvolit ║
╚═════════╧═══════════════════════════════════════════════════════════╝

Order - rozdíl v uspořádání
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ 2D matice tak, jak ji vidí uživatel (logická struktura)
| 1 2 3 |
| 4 5 6 |
| 7 8 9 |
▶ Uložení v operační paměti
1 2 3 4 5 6 7 8 9 - 'C'
1 4 7 2 5 8 3 6 9 - 'F'

Příklady použití funkce numpy.array
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# vytvoření pole ze seznamu
>>> numpy.array([1,2,3,4])
          ↓
array([1, 2, 3, 4])

Příklady použití funkce numpy.array
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# vytvoření pole z typu 'range'
>>> numpy.array(range(10))
          ↓
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

Příklady použití funkce numpy.array
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# explicitní specifikace typu všech prvků pole
# (interně se provádí přetypování)
>>> numpy.array(range(10), dtype=numpy.float)
          ↓
array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])

Příklady použití funkce numpy.array
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# explicitní specifikace uspořádání prvků pole
# (nemá velký význam pro 1D pole=vektory)
>>> numpy.array(range(10), order='C')
          ↓
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

Příklady použití funkce numpy.array
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# explicitní specifikace uspořádání prvků pole
# (nemá velký význam pro 1D pole=vektory)
>>> numpy.array(range(10), order='F')
          ↓
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

Příklady použití funkce numpy.array
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# vytvoření dvourozměrné matice
>>> numpy.array([[1,2,3],[4,5,6]])
          ↓
array([[1, 2, 3],
       [4, 5, 6]])

Konstruktor numpy.zeros
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Vektor nebo matice s nulovými prvky
▶ Poměrně častý požadavek v praxi

Volání konstruktoru numpy.zeros
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
>>> zeros(shape, dtype=float, order='C')

Příklady použití konstruktoru numpy.zeros
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# jednorozměrný vektor s jediným prvkem
>>> numpy.zeros(1)
          ↓
array([ 0.])

Příklady použití konstruktoru numpy.zeros
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# jednorozměrný vektor s deseti prvky
>>> numpy.zeros(10)
          ↓
array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])

Příklady použití konstruktoru numpy.zeros
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# matice o velikosti 5x5 prvků, každý prvek je typu float
>>> numpy.zeros((5,5))
          ↓
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])

Příklady použití konstruktoru numpy.zeros
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# matice o velikosti 5x5 prvků, každý prvek je typu int
>>> numpy.zeros((5,5),dtype=int)
          ↓
array([[0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0]])

Příklady použití konstruktoru numpy.zeros
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# použití komplexních čísel
>>> numpy.zeros((2,2),dtype=numpy.complex)
          ↓
array([[ 0.+0.j,  0.+0.j],
       [ 0.+0.j,  0.+0.j]])

Konstruktor numpy.ones
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Vektor či matice s prvky nastavenými na jedničku
▶ (nejedná se o jednotkovou matici!)

Volání konstruktoru numpy.ones
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
>>> numpy.ones(shape, dtype=None, order='C')

Příklady použití konstruktoru numpy.ones
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# jednorozměrný vektor s deseti prvky
>>> numpy.ones(10)
          ↓
array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])

Příklady použití konstruktoru numpy.ones
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# matice se třemi řádky a čtyřmi sloupci
>>> numpy.ones((3,4))
          ↓
array([[ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.]])

Příklady použití konstruktoru numpy.ones
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# matice se třemi řádky a čtyřmi sloupci
# s explicitní specifikací typu prvků
>>> numpy.ones((3,4), dtype=int)
          ↓
array([[1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1]])

Příklady použití konstruktoru numpy.ones
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# trojrozměrné pole s prvky typu int
>>> numpy.ones((3,4,5), dtype=int)
          ↓
array([[[1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1]],
       [[1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1]],
       [[1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1]]])

Příklady použití konstruktoru numpy.ones
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# trojrozměrné pole s prvky typu int
# (oproti předchozímu příkladu se velikosti v jednotlivých dimenzích liší)
>>> numpy.ones((5,4,3), dtype=int)
          ↓
array([[[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],
       [[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],
       [[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],
       [[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],
       [[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]]])

Příklady použití konstruktoru numpy.ones
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# zde může být použití typu komplexní číslo možná poněkud překvapující,
# ovšem stále platí, že 1=1+0j
>>> numpy.ones((3,2),dtype=numpy.complex)
          ↓
array([[ 1.+0.j,  1.+0.j],
       [ 1.+0.j,  1.+0.j],
       [ 1.+0.j,  1.+0.j]])

Funkce numpy.arange
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Array+range
▶ Podobné jako xrange/range
    ◆ ovšem návratovou hodnotou je ndarray

Použití funkce numpy.arange
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# při použití jednoho parametru má tento parametr význam hodnoty "stop"
# vytvoří se vektor s prvky od 0 do "stop" (kromě)
>>> numpy.arange(10)
          ↓
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

Použití funkce numpy.arange
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# specifikace hodnot "start" (včetně) a "stop" (kromě)
>>> numpy.arange(10, 20)
          ↓
array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])

Použití funkce numpy.arange
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# třetí nepovinný parametr určuje krok použitý při generování prvků vektoru
>>> numpy.arange(10, 20, 2)
          ↓
array([10, 12, 14, 16, 18])

# krok může být samozřejmě záporný
>>> numpy.arange(20, 10, -2)
          ↓
array([20, 18, 16, 14, 12])

Použití funkce numpy.arange
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# nemusíme zůstat pouze u celých čísel, protože pracovat je možné i s hodnotami
# typu float a complex
>>> numpy.arange(0,5, 0.1)
          ↓
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,
        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,
        3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,  4. ,  4.1,  4.2,  4.3,
        4.4,  4.5,  4.6,  4.7,  4.8,  4.9])

Použití funkce numpy.arange
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# použití komplexních konstant
>>> numpy.arange(0+0j, 10+10j, 2+0j)
          ↓
array([ 0.+0.j,  2.+0.j,  4.+0.j,  6.+0.j,  8.+0.j])

Funkce numpy.linspace
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Při znalosti první a poslední hodnoty ve vektoru
▶ Zadává se
    ◆ počáteční hodnota
    ◆ koncová hodnota
    ◆ počet prvků vektoru (implicitně 50 prvků)

Použití funkce numpy.linspace
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# pokud se nespecifikuje počet prvků, bude se předpokládat, že výsledný
# vektor má mít padesát prvků
>>> numpy.linspace(0, 1)
          ↓
array([ 0.        ,  0.02040816,  0.04081633,  0.06122449,  0.08163265,
        0.10204082,  0.12244898,  0.14285714,  0.16326531,  0.18367347,
        0.20408163,  0.2244898 ,  0.24489796,  0.26530612,  0.28571429,
        0.30612245,  0.32653061,  0.34693878,  0.36734694,  0.3877551 ,
        0.40816327,  0.42857143,  0.44897959,  0.46938776,  0.48979592,
        0.51020408,  0.53061224,  0.55102041,  0.57142857,  0.59183673,
        0.6122449 ,  0.63265306,  0.65306122,  0.67346939,  0.69387755,
        0.71428571,  0.73469388,  0.75510204,  0.7755102 ,  0.79591837,
        0.81632653,  0.83673469,  0.85714286,  0.87755102,  0.89795918,
        0.91836735,  0.93877551,  0.95918367,  0.97959184,  1.        ])

Použití funkce numpy.linspace
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# zde explicitně specifikujeme, že výsledný vektor má mít deset prvků
# (tím, že se začíná od nuly, získáme krok 0.11111111...)
>>> numpy.linspace(0, 1, 10)
          ↓
array([ 0.        ,  0.11111111,  0.22222222,  0.33333333,  0.44444444,
        0.55555556,  0.66666667,  0.77777778,  0.88888889,  1.        ])

Použití funkce numpy.linspace
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# zde explicitně specifikujeme, že výsledný vektor má mít jedenáct prvků
>>> numpy.linspace(0, 1, 11)
          ↓
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])

Použití funkce numpy.linspace
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# sekvence hodnot samozřejmě může i klesat
>>> numpy.linspace(1, 0, 11)
          ↓
array([ 1. ,  0.9,  0.8,  0.7,  0.6,  0.5,  0.4,  0.3,  0.2,  0.1,  0. ])

Použití funkce numpy.linspace
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# použít je možné i komplexní čísla
>>> numpy.linspace(0+0j, 1+0j, 10)
          ↓
array([ 0.00000000+0.j,  0.11111111+0.j,  0.22222222+0.j,  0.33333333+0.j,
        0.44444444+0.j,  0.55555556+0.j,  0.66666667+0.j,  0.77777778+0.j,
        0.88888889+0.j,  1.00000000+0.j])

Použití funkce numpy.linspace
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# použít je možné i komplexní čísla
>>> numpy.linspace(0+0j, 0+1j, 10)
          ↓
array([ 0.+0.j        ,  0.+0.11111111j,  0.+0.22222222j,  0.+0.33333333j,
        0.+0.44444444j,  0.+0.55555556j,  0.+0.66666667j,  0.+0.77777778j,
        0.+0.88888889j,  0.+1.j        ])

Použití funkce numpy.linspace
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# další možnost použití komplexních čísel
>>> numpy.linspace(0+0j, 1+1j, 10)
          ↓
array([ 0.00000000+0.j        ,  0.11111111+0.11111111j,
        0.22222222+0.22222222j,  0.33333333+0.33333333j,
        0.44444444+0.44444444j,  0.55555556+0.55555556j,
        0.66666667+0.66666667j,  0.77777778+0.77777778j,
        0.88888889+0.88888889j,  1.00000000+1.j        ])

Přetypování prvků v poli
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ Dva způsoby
    ◆ konverzní funkce
        - numpy.float32()
        - numpy.int32()
        - numpy.complex128()
        - ...
    ◆ použití metody astype

Přetypování prvků v poli
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
# změna typu
numpy.float32(1.0)

# přetypování
numpy.int64([1,2,3,4])

# přetypování
numpy.float16([1,2,3,4])
array([ 1.,  2.,  3.,  4.], dtype=float16)

# vektor čísel typu float
numpy.linspace(0, 1, 10)

array([ 0.        ,  0.11111111,  0.22222222,  0.33333333,  0.44444444,
        0.55555556,  0.66666667,  0.77777778,  0.88888889,  1.        ])

# přetypování na vektor celých čísel
numpy.int32(numpy.linspace(0, 1, 10))
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1], dtype=int32)

Použití metody astype
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
a=numpy.arange(0, 10)

a.astype(numpy.complex64)
array([ 0.+0.j,  1.+0.j,  2.+0.j,  3.+0.j,  4.+0.j,  5.+0.j,  6.+0.j,
        7.+0.j,  8.+0.j,  9.+0.j], dtype=complex64)

Zjištění tvaru pole
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

Změna tvaru pole
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

Další podbalíčky, které nalezneme v knihovně ndarray
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
doc         obsahuje dokumentaci ke knihovně i k základním konstrukcím a operacím
lib         základní funkce používané i některými dalšími podbalíčky
random      funkce pro využití generátorů pseudonáhodných číselných hodnot
linalg      funkce z&nbsp;oblasti lineární algebry
fft         rychlá Fourierova transformace a pomocné funkce
polynomial  funkce pro práci s polynomy
testing     nástroje pro psaní testů
f2py        (jednosměrné) rozhraní mezi Fortranem a Pythonem
distutils   další pomocné nástroje, které přímo nesouvisí s výpočty
            nad vektory a maticemi, ale se způsobem balíčkování

‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

Odkazy na další informační zdroje
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
* Numpy Home Page
  http://www.numpy.org/
* NumPy v1.10 Manual
  http://docs.scipy.org/doc/numpy/index.html
* NumPy (Wikipedia)
  https://en.wikipedia.org/wiki/NumPy
